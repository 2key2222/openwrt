diff --git a/net/nat/hw_nat/hwnat_ioctl.c b/net/nat/hw_nat/hwnat_ioctl.c
index 116479c61..c6367da66 100755
--- a/net/nat/hw_nat/hwnat_ioctl.c
+++ b/net/nat/hw_nat/hwnat_ioctl.c
@@ -674,6 +674,7 @@ int ppe_tbl_clear(void)
 	memset(PpeFoeBase, 0, foe_tbl_size);
 	PpeSetCacheEbl();	/*clear HWNAT cache */
 	RegModifyBits(PPE_FOE_CFG, FWD_CPU_BUILD_ENTRY, 4, 2);
+	ExcludeBoundaryEntry(PpeFoeBase);
 
 	return HWNAT_SUCCESS;
 }
diff --git a/net/nat/hw_nat/ra_nat.c b/net/nat/hw_nat/ra_nat.c
index 46da53407..5294f13e1 100755
--- a/net/nat/hw_nat/ra_nat.c
+++ b/net/nat/hw_nat/ra_nat.c
@@ -198,18 +198,36 @@ uint16_t RemoveVlanTag(struct sk_buff *skb)
 
 }
 
+/*boundary entry can't be used to accelerate data flow*/
+void ExcludeBoundaryEntry(struct FoeEntry *PpeFoeBase){
+#if defined (CONFIG_RA_HW_NAT_IPV6) && defined (CONFIG_RALINK_MT7621)
+	int entry_base = 0;
+	int bad_entry, i, j;
+	struct FoeEntry *foe_entry;
+	int boundary_entry_offset[7] = {12, 25, 38, 51, 76, 89, 102};/*these entries are boundary every 128 entries*/
+
+	if(!PpeFoeBase)
+		return;
+
+	for(i=0; entry_base < FOE_4TB_SIZ; i++) {
+		/* set boundary entries as static*/
+		for(j=0;j<7;j++){
+			bad_entry = entry_base + boundary_entry_offset[j];
+			foe_entry = &PpeFoeBase[bad_entry];
+			foe_entry->udib1.sta = 1;
+		}
+		entry_base = (i+1)*128;
+	}
+#endif
+	return;
+}
+
 static int FoeAllocTbl(uint32_t NumOfEntry)
 {
 	uint32_t FoeTblSize;
 #if defined (CONFIG_RA_HW_NAT_PACKET_SAMPLING)
 	uint32_t PsTblSize;
 #endif
-#if defined (CONFIG_RA_HW_NAT_IPV6) && defined (CONFIG_RALINK_MT7621)
-	struct FoeEntry *foe_entry;
-	int boundary_entry_offset[7] = {12, 25, 38, 51, 76, 89, 102};/*these entries are bad every 128 entries*/
-	int entry_base = 0;
-	int bad_entry, i, j;
-#endif
 #if !defined (CONFIG_RALINK_MT7620)
 /*********************This is for insmod/rmmod hwnat issue*****************************/
 	dma_addr_t PpePhyFoeBase_tmp;
@@ -246,17 +264,7 @@ static int FoeAllocTbl(uint32_t NumOfEntry)
 	printk("init PpeFoeBase = %p\n", PpeFoeBase);
 
 	memset(PpeFoeBase, 0, FoeTblSize);
-#if defined (CONFIG_RA_HW_NAT_IPV6) && defined (CONFIG_RALINK_MT7621)
-	for(i=0; entry_base < NumOfEntry; i++) {
-		/* set bad entries as static*/
-		for(j=0;j<7;j++){
-			bad_entry = entry_base + boundary_entry_offset[j];
-			foe_entry = &PpeFoeBase[bad_entry];
-			foe_entry->udib1.sta = 1;
-		}
-		entry_base = (i+1)*128;
-	}
-#endif
+	ExcludeBoundaryEntry(PpeFoeBase);
 
 #if defined (CONFIG_RA_HW_NAT_PACKET_SAMPLING)
 	PsTblSize = NumOfEntry * sizeof(struct PsEntry);
diff --git a/net/nat/hw_nat/ra_nat.h b/net/nat/hw_nat/ra_nat.h
index e7c1155e0..fb4d41347 100644
--- a/net/nat/hw_nat/ra_nat.h
+++ b/net/nat/hw_nat/ra_nat.h
@@ -336,6 +336,8 @@ typedef struct {
  */
 int32_t GetPppoeSid(struct sk_buff *skb, uint32_t vlan_gap, uint16_t * sid, uint16_t * ppp_tag);
 
+void ExcludeBoundaryEntry(struct FoeEntry *PpeFoeBase);
+
 int PpeSetBindThreshold(uint32_t threshold);
 int PpeSetMaxEntryLimit(uint32_t full, uint32_t half, uint32_t qurt);
 int PpeSetRuleSize(uint16_t pre_acl, uint16_t pre_meter, uint16_t pre_ac,
-- 
2.18.0

