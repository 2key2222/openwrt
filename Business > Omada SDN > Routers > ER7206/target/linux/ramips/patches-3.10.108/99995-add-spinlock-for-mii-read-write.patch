--- a/drivers/net/raeth/mii_mgr.c	2018-09-03 10:14:10.000000000 +0800
+++ b/drivers/net/raeth/mii_mgr.c	2019-06-14 15:27:22.962140100 +0800
@@ -58,7 +58,6 @@
 #endif
 
 #if   defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7620) || defined (CONFIG_ARCH_MT7623)
-
 u32 __mii_mgr_read(u32 phy_addr, u32 phy_register, u32 *read_data)
 {
 	u32 volatile status = 0;
@@ -114,7 +113,7 @@
 	u32 volatile data;
 
 	enable_mdio(1);
-
+    
 	// make sure previous write operation is complete
 	while(1) {
 		if (!(sysRegRead(MDIO_PHY_CONTROL_0) & (0x1 << 31))) 
@@ -150,9 +149,13 @@
 		}
 	}
 }
+static DEFINE_SPINLOCK(mii_rw_lock);
 
 u32 mii_mgr_read(u32 phy_addr, u32 phy_register, u32 *read_data)
 {
+	unsigned long irqFlags;
+	spin_lock_irqsave(&mii_rw_lock, irqFlags);
+	{
 #if defined (CONFIG_GE1_RGMII_FORCE_1000) || defined (CONFIG_GE1_TRGMII_FORCE_1200) || defined (CONFIG_GE1_TRGMII_FORCE_2000) || defined (CONFIG_GE1_TRGMII_FORCE_2600) || defined (CONFIG_P5_RGMII_TO_MT7530_MODE)
         u32 low_word;
         u32 high_word;
@@ -174,6 +177,8 @@
 					if(an_status){
 						*(unsigned long *)(ESW_PHY_POLLING) |= (1<<31);//(AN polling on)
 					}
+					
+					spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 					return 1;
                                 }
                         }
@@ -185,15 +190,24 @@
 #endif
 	{
                 if(__mii_mgr_read(phy_addr, phy_register, read_data)) {
+					
+				spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
                         return 1;
                 }
         }
+}
+		spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 
         return 0;
 }
 
 u32 mii_mgr_write(u32 phy_addr, u32 phy_register, u32 write_data)
 {
+
+unsigned long irqFlags;
+spin_lock_irqsave(&mii_rw_lock, irqFlags);
+
+{
 #if defined (CONFIG_GE1_RGMII_FORCE_1000) || defined (CONFIG_GE1_TRGMII_FORCE_1200) || defined (CONFIG_GE1_TRGMII_FORCE_2000) || defined (CONFIG_GE1_TRGMII_FORCE_2600) || defined (CONFIG_P5_RGMII_TO_MT7530_MODE)
 	u32 an_status = 0;
         
@@ -212,6 +225,7 @@
 					if(an_status){
 						*(unsigned long *)(ESW_PHY_POLLING) |= (1<<31);//(AN polling on)
 					}
+					spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 				    return 1;
                                 }
                         }
@@ -223,9 +237,12 @@
 #endif
 	{
                 if(__mii_mgr_write(phy_addr, phy_register, write_data)) {
+					spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
                         return 1;
                 }
         }
+}
+		spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 
         return 0;
 }
@@ -276,6 +292,8 @@
 	u32 rc = 0;
 	unsigned long volatile t_start = jiffies;
 	u32 volatile data = 0;
+	unsigned long irqFlags;
+	spin_lock_irqsave(&mii_rw_lock, irqFlags);
 
         // set address first
 	mii_mgr_cl45_set_address(port_num, dev_addr, reg_addr);
@@ -291,6 +309,8 @@
 		else if (time_after(jiffies, t_start + 5*HZ)) {
 			enable_mdio(0);
 			printk("\n MDIO Read operation is ongoing !!\n");
+		
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return rc;
 		}
 	}
@@ -303,15 +323,21 @@
 		if (!(sysRegRead(MDIO_PHY_CONTROL_0) & (0x1 << 31))) {
 			*read_data = (sysRegRead(MDIO_PHY_CONTROL_0) & 0x0000FFFF);
 			enable_mdio(0);
+		
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return 1;
 		}
 		else if (time_after(jiffies, t_start+5*HZ)) {
 			enable_mdio(0);
 			printk("\n Set Operation: MDIO Read operation is ongoing and Time Out!!\n");
+		    
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return 0;
 		}
 		sysRegRead(MDIO_PHY_CONTROL_0);
 	}
+	spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
+	return 0;
 
 }
 
@@ -320,6 +346,8 @@
 	u32 rc = 0;
 	unsigned long volatile t_start = jiffies;
 	u32 volatile data = 0;
+	unsigned long irqFlags;
+	spin_lock_irqsave(&mii_rw_lock, irqFlags);
 
 	// set address first
 	mii_mgr_cl45_set_address(port_num, dev_addr, reg_addr);
@@ -334,6 +362,8 @@
 		else if (time_after(jiffies, t_start + 5*HZ)) {
 			enable_mdio(0);
 			printk("\n MDIO Read operation is ongoing !!\n");
+		
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return rc;
 		}
 	}
@@ -349,15 +379,22 @@
 		if (!(sysRegRead(MDIO_PHY_CONTROL_0) & (0x1 << 31)))
 		{
 			enable_mdio(0);
+			
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return 1;
 		}
 		else if (time_after(jiffies, t_start + 5 * HZ)) {
 			enable_mdio(0);
 			printk("\n MDIO Write operation Time Out\n");
+		
+			spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
 			return 0;
 		}
 
 	}
+	
+	spin_unlock_irqrestore(&mii_rw_lock, irqFlags);
+	return 0;
 }
 
 #else // not rt6855
