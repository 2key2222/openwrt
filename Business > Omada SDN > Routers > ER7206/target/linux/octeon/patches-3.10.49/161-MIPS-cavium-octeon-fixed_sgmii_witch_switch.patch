--- a/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c	2016-03-31 09:09:31.000000000 +0800
+++ b/arch/mips/cavium-octeon/executive/cvmx-helper-sgmii.c	2016-03-31 09:10:54.000000000 +0800
@@ -43,7 +43,7 @@
  * Functions for SGMII initialization, configuration,
  * and monitoring.
  *
- * <hr>$Revision: 89030 $<hr>
+ * <hr>$Revision: 102574 $<hr>
  */
 #ifdef CVMX_BUILD_FOR_LINUX_KERNEL
 #include <asm/octeon/cvmx.h>
@@ -219,13 +219,23 @@
 	 * Write PCS*_MR*_CONTROL_REG[RST_AN]=1 to ensure a fresh
 	 * sgmii negotiation starts.
 	 */
-	control_reg.s.an_en = 1;
+	phy_mode = cvmx_helper_get_mac_phy_mode(interface, index);
+	control_reg.s.an_en = !phy_mode;
+
+	/* Force a PCS reset by powering down the PCS interface */
+	control_reg.s.pwr_dn = 1;
+	cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface),
+		       control_reg.u64);
+
+	if (cvmx_sysinfo_get()->board_type != CVMX_BOARD_TYPE_SIM)
+		/* 25ms should be enough, 10ms is too short */
+		cvmx_wait_usec(25000);
+
 	control_reg.s.pwr_dn = 0;
 	cvmx_write_csr(CVMX_PCSX_MRX_CONTROL_REG(index, interface),
 		       control_reg.u64);
 
 	/* The Cortina PHY runs in 1000base-X mode */
-	phy_mode = cvmx_helper_get_mac_phy_mode(interface, index);
 	mode_1000x = cvmx_helper_get_1000x_mode(interface, index);
 	pcsx_miscx_ctl_reg.u64 =
 		cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG(index, interface));
@@ -248,7 +258,7 @@
 	    CVMX_WAIT_FOR_FIELD64(CVMX_PCSX_MRX_STATUS_REG(index, interface),
 				  union cvmx_pcsx_mrx_status_reg, an_cpt, ==, 1,
 				  10000)) {
-		cvmx_dprintf("SGMII%d: Port %d link timeout\n", interface, index);
+		cvmx_dprintf("SGMII%d: Port %d link timeout, board_type = 0x%08x, TYPE_SIM=0x%08x\n", interface, index, cvmx_sysinfo_get()->board_type, CVMX_BOARD_TYPE_SIM);
 		return -1;
 	}
 	return 0;
@@ -634,6 +644,9 @@
 		speed = cvmx_qlm_get_gbaud_mhz(0) * 8 / 10;
 	} else if (OCTEON_IS_MODEL(OCTEON_CN70XX)) {
 		speed = cvmx_qlm_get_gbaud_mhz(0) * 8 / 10;
+		if (cvmx_qlm_get_dlm_mode(0, interface) == CVMX_QLM_MODE_SGMII)
+			speed >>= 1;
+		else
 		speed >>= 2;
 	}
 
@@ -693,7 +706,7 @@
 		pcsx_miscx_ctl_reg.u64 = cvmx_read_csr(CVMX_PCSX_MISCX_CTL_REG
 						(index, interface));
 
-		/* Disable autonegotiation only when MAC mode. */
+		/* Disable autonegotiation only when MAC mode is enabled. */
 		if (pcsx_miscx_ctl_reg.s.mac_phy == 0) {
 			union cvmx_pcsx_mrx_control_reg control_reg;
 			control_reg.u64 = cvmx_read_csr(
