--- a/arch/mips/ath79/dev-eth.c
+++ b/arch/mips/ath79/dev-eth.c
@@ -1030,6 +1030,14 @@
 		BUG();
 	}
 
+	/*+	 * since some of patchs are applied to this file
+	 * we couldnt use the above switch statement.
+	 * it can be cleaned up later+	 */
+	if ((id == 0)  && (ath79_soc == ATH79_SOC_QCA956X)) {
+		pdata->is_qca9561 = 1;
+	} else {
+		pdata->is_qca9561 = 0;
+	}
 	switch (pdata->phy_if_mode) {
 	case PHY_INTERFACE_MODE_GMII:
 	case PHY_INTERFACE_MODE_RGMII:
--- a/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c
+++ b/drivers/net/ethernet/atheros/ag71xx/ag71xx_phy.c
@@ -60,7 +60,8 @@
 		ag71xx_ar7240_start(ag);
 	} else {
 		ag->link = 1;
-		ag71xx_link_adjust(ag);
+		if (!pdata->is_qca9561)
+			ag71xx_link_adjust(ag);
 	}
 }
 
@@ -77,7 +78,13 @@
 	spin_lock_irqsave(&ag->lock, flags);
 	if (ag->link) {
 		ag->link = 0;
-		ag71xx_link_adjust(ag);
+		if (pdata->is_qca9561)	{
+			if (ag->phy_dev)
+						ag->phy_dev->link=0;
+		} 
+		else {
+					ag71xx_link_adjust(ag);
+		}
 	}
 	spin_unlock_irqrestore(&ag->lock, flags);
 }
--- a/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -42,6 +42,7 @@
 #ifdef CONFIG_AG71XX_SRAM_DESCRIPTORS
 #define MAX_AG71XX_USING_SRAM		2
 #define MAX_AG71XX_SRAM_RINGS		(MAX_AG71XX_USING_SRAM) * 2
+#define AR8327_REG_PORT0_STATUS		0x7c
 static unsigned long ag71xx_ring_bufs[MAX_AG71XX_SRAM_RINGS] = {
 	0x1d000000UL,
 	0x1d001000UL,
@@ -50,6 +51,9 @@
 };
 #endif /* CONFIG_AG71XX_SRAM_DESCRIPTORS */
 
+extern u32 ar8216_phy_read(u32 address, u32 reg);
+extern void ar8216_phy_write(u32 address, u32 reg,u32 data);
+
 /*#define DEBUG*/
 #ifdef DEBUG
 
@@ -457,6 +461,12 @@
 static void ag71xx_hw_stop(struct ag71xx *ag)
 {
 	/* disable all interrupts and stop the rx/tx engine */
+		struct ag71xx_platform_data *pdata = ag71xx_get_pdata(ag);
+	
+		if (pdata->is_qca9561 && ag->phy_dev) {
+			ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x0);
+		}
+	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1,0x0);
 	ag71xx_wr(ag, AG71XX_REG_INT_ENABLE, 0);
 	ag71xx_wr(ag, AG71XX_REG_RX_CTRL, 0);
 	ag71xx_wr(ag, AG71XX_REG_TX_CTRL, 0);
@@ -467,9 +477,12 @@
 	struct ag71xx_platform_data *pdata = ag71xx_get_pdata(ag);
 
     printk(KERN_EMERG" @@@@@@@@ %s-%d, ag71xx_hw_setup in! \n", __FUNCTION__, __LINE__);
-
+	if (pdata->is_qca9561 && ag->phy_dev) {
+		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x0);
+	}
+	
 	/* setup MAC configuration registers */
-	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1, MAC_CFG1_INIT);
+	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1, 0x0);
 
 	ag71xx_sb(ag, AG71XX_REG_MAC_CFG2,
 		  MAC_CFG2_PAD_CRC_EN | MAC_CFG2_LEN_CHECK);
@@ -558,11 +571,18 @@
 
 static void ag71xx_hw_start(struct ag71xx *ag)
 {
+	struct ag71xx_platform_data *pdata = ag71xx_get_pdata(ag);
 	/* start RX engine */
 	ag71xx_wr(ag, AG71XX_REG_RX_CTRL, RX_CTRL_RXE);
 
 	/* enable interrupts */
 	ag71xx_wr(ag, AG71XX_REG_INT_ENABLE, AG71XX_INT_INIT);
+
+	if(pdata->is_qca9561 &&  ag->phy_dev) {
+		/* Enable Switch Mac0's - tx,rx,flowctrl,duplx ,speed */
+		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x4e);
+	}
+	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1, MAC_CFG1_INIT);
 }
 
 static void ag71xx_disable_inline_chksum_engine(struct ag71xx *ag)
@@ -609,7 +629,7 @@
                     );
 	*/
 
-	if (pdata->is_ar724x)
+	if (!pdata->is_qca9561 && pdata->is_ar724x)
 		ag71xx_fast_reset(ag);
 
 	cfg2 = ag71xx_rr(ag, AG71XX_REG_MAC_CFG2);
@@ -652,12 +672,13 @@
 	ag71xx_wr(ag, AG71XX_REG_MAC_CFG2, cfg2);
 	ag71xx_wr(ag, AG71XX_REG_FIFO_CFG5, fifo5);
 	ag71xx_wr(ag, AG71XX_REG_MAC_IFCTL, ifctl);
-	ag71xx_hw_start(ag);
 
+
 	if (pdata->is_qca956x) {
 		ag71xx_disable_inline_chksum_engine(ag);
 	}
 
+	ag71xx_hw_start(ag);
 	netif_carrier_on(ag->dev);
 	if (netif_msg_link(ag))
 		pr_info("%s: link up (%sMbps/%s duplex)\n",
@@ -818,7 +839,7 @@
 	DBG("%s: packet injected into TX queue\n", ag->dev->name);
 
 	dev->trans_start = jiffies;
-
+	wmb();
 	/* enable TX engine */
 	ag71xx_wr_fast(ag->tx_ctrl_reg, TX_CTRL_TXE);
 	ag71xx_wr_flush(ag->tx_ctrl_reg);
