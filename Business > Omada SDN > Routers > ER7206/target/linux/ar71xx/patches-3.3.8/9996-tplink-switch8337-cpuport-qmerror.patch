--- a/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -464,7 +464,10 @@
 		struct ag71xx_platform_data *pdata = ag71xx_get_pdata(ag);
 	
 		if (pdata->is_qca9561 && ag->phy_dev) {
-			ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x0);
+			u32 value = 0;
+			value = ar8216_phy_read((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS);
+			value &= (~((1<<2)|(1<<3)));
+			ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, value);
 		}
 	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1,0x0);
 	ag71xx_wr(ag, AG71XX_REG_INT_ENABLE, 0);
@@ -478,7 +481,10 @@
 
     printk(KERN_EMERG" @@@@@@@@ %s-%d, ag71xx_hw_setup in! \n", __FUNCTION__, __LINE__);
 	if (pdata->is_qca9561 && ag->phy_dev) {
-		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x0);
+		u32 value = 0;
+		value = ar8216_phy_read((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS);
+		value &= (~((1<<2)|(1<<3)));
+		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, value);
 	}
 	
 	/* setup MAC configuration registers */
@@ -580,7 +586,14 @@
 
 	if(pdata->is_qca9561 &&  ag->phy_dev) {
 		/* Enable Switch Mac0's - tx,rx,flowctrl,duplx ,speed */
-		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, 0x4e);
+		u32 value = 0;
+		value = ar8216_phy_read((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS);
+		value = 0xf2;
+		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, value);
+		
+		udelay(800);
+		value |= 0x3 << 2;	// 2016/02/16, tx/rx enable
+		ar8216_phy_write((u32)ag->phy_dev->priv, AR8327_REG_PORT0_STATUS, value);
 	}
 	ag71xx_wr(ag, AG71XX_REG_MAC_CFG1, MAC_CFG1_INIT);
 }
@@ -610,6 +623,11 @@
 	u32 fifo5;
 
 	if (!ag->link) {
+		
+		/* stop queue first in case of tx timeout,add by Wu Yin, 10Oct15 */
+		ag->tx_stopped = true;
+		netif_stop_queue(ag->dev);
+
 		ag71xx_hw_stop(ag);
 		netif_carrier_off(ag->dev);
 		if (netif_msg_link(ag))
@@ -679,6 +697,11 @@
 	}
 
 	ag71xx_hw_start(ag);
+	
+	/* add by Wu Yin, 10Oct15 */
+	netif_start_queue(ag->dev);
+	ag->tx_stopped = false;
+
 	netif_carrier_on(ag->dev);
 	if (netif_msg_link(ag))
 		pr_info("%s: link up (%sMbps/%s duplex)\n",
@@ -911,11 +934,14 @@
 {
 	struct ag71xx *ag = container_of(work, struct ag71xx, restart_work);
 
+/* go heavy reset, modified by Wu Yin, 10Oct15 */
+#if 0
 	if (ag71xx_get_pdata(ag)->is_ar724x) {
 		ag->link = 0;
 		ag71xx_link_adjust(ag);
 		return;
 	}
+#endif
 
 	ag71xx_stop(ag->dev);
 	ag71xx_open(ag->dev);
@@ -1066,8 +1092,21 @@
 		 * Is our descriptor marked as empty?  If it is then we're done.
 		 */
 		desc_ctrl = desc->ctrl;
+		ag71xx_get_pdata(ag)->ddr_flush();
 		if (unlikely(desc_ctrl & DESC_EMPTY)) {
-			break;
+			/* enable this WAR only for AP152 which has only one gmac */
+			if (ag71xx_get_pdata(ag)->is_qca9561 && (ag71xx_gmac_num == 1)) {
+				u32 rx_status = ag71xx_rr_fast(ag->rx_status_reg);
+				if ((((rx_status >> 16) & 0xff) > 1) && (desc->ctrl & DESC_EMPTY)) {
+					while (desc->ctrl & DESC_EMPTY) {
+						curr = curr->next;
+						desc = curr->desc;
+						skb = curr->skb;
+					}
+				} else
+					break;
+			} else
+				break;
 		}
 
 		/*