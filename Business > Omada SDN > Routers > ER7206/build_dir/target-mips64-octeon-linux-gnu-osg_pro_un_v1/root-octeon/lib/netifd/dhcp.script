#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

ip2num() {
	transfer=$1
	a=`echo $transfer | awk -F'.' '{print $1}'`
	b=`echo $transfer | awk -F'.' '{print $2}'`
	c=`echo $transfer | awk -F'.' '{print $3}'`
	d=`echo $transfer | awk -F'.' '{print $4}'`

	echo -n "$(((a<<24)+(b<<16)+(c<<8)+d))"
}

set_proto_route() {
	local target=$1
	local prefix=$2
	local gateway=$3

	#poe_iface=${INTERFACE%%_*}_poe
	#poe_enable=$(uci get network.$poe_iface.t_poe_enable)
	#if [ "x$poe_enable" == "x1" -a "$prefix" == "0" ] ; then
	#	return 0;
	#fi

	skip=""
	[ -e "/tmp/.all_ifs_output" ] && {
		skip=$(cat /tmp/.all_ifs_output | while read line;
		do
			OIFS=$IFS; IFS=' ';
			set -- $line; xzone=$1;xifname=$2;xipaddr=$3;xprefixlen=$4;xislan=$5;
			IFS=$OIFS;

			[ "$xislan" == "1" -a $xprefixlen -le $prefix ] && {
				yipaddr=`ip2num $xipaddr`
				ytarget=`ip2num $target`
				yprefix=$xprefixlen
				[ $(($yipaddr >> (32 -$yprefix))) -eq $(($ytarget >> (32 - $yprefix))) ] && echo yes
			}
		done)
	}

	[ -z "$skip" ] && proto_add_ipv4_route "$target" $prefix "$gateway"
}

set_routes() {
	local max=128
	local target=
	local oldstr=
	local newstr=
	local mask=

	while [ -n "$1" -a $max -gt 0 ]; do
		target=${1%%/*}
		mask=32
		oldstr=$target
		while [ $mask -ge 0 ]; do
			newstr=${oldstr%%.0}
			if [ "X$newstr" != "X$oldstr" ]; then
				mask=$((mask-8))
				oldstr=$newstr
			else
				break
			fi
		done

		# echo "proto_add_ipv4_route $target $mask ${1##*/}" >/dev/console
		[ "$target" != "0.0.0.0" ] && set_proto_route "$target" $mask "${1##*/}"
		max=$(($max-1))
		shift 1
	done
}

set_classless_routes() {
	local max=128
	local type
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		[ "${1##*/}" != "0" ] && {
			set_proto_route "${1%%/*}" "${1##*/}" "$2"
		}
		max=$(($max-1))
		shift 2
	done
}

set_default_route() {
	for i in $2; do
		set_proto_route 0.0.0.0 0 "$i"
	done
}

setup_interface () {
	[ -e /usr/sbin/all_ifs ] && /usr/sbin/all_ifs > /tmp/.all_ifs_output

	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	set_default_route "$INTERFACE" "$router"
	[ -z "$staticroutes" -a -z "$msstaticroutes" ] && {
		# option 33
		[ -n "$routes" ] && set_routes $routes
	}

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for dns in $dns; do
		proto_add_dns_server "$dns"
	done
	for domain in $domain; do
		proto_add_dns_search "$domain"
	done

	proto_add_data
	[ -n "$ZONE" ] && json_add_string zone "$ZONE"
	proto_close_data

	proto_send_update "$INTERFACE"


	if [ "$IFACE6RD" != 0 -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6rd

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi

	# TODO
	# [ -n "$ntpsrv" ] && 	change_state network "$ifc" lease_ntpsrv "$ntpsrv"
	# [ -n "$timesvr" ] && 	change_state network "$ifc" lease_timesrv "$timesvr"
	# [ -n "$hostname" ] &&	change_state network "$ifc" lease_hostname "$hostname"
	# [ -n "$timezone" ] && 	change_state network "$ifc" lease_timezone "$timezone"
}

renew_timeout() {
	. /lib/zone/zone_api.sh

	rdev=$(zone_get_effect_devices ${INTERFACE})
	[ -z "${rdev}" ] && rdev="${interface}"
	ubus call online refresh "{\"dev\":\"$rdev\"}"
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

PRECONFIG='/tmp/.dhcpc_preconfig'
NOWCONFIG='/tmp/.dhcpc_nowconfig'
del_config() {
	local preconfig="${PRECONFIG}_${interface}"
	rm -rf ${preconfig}
}

tst_config() {
	local nowconfig="${NOWCONFIG}_${interface}"
	local preconfig="${PRECONFIG}_${interface}"
	env | sort > ${nowconfig}
	[ "$1" != "bound" ] && $(diff ${preconfig} ${nowconfig}) && exit 0
	cp -rf ${nowconfig} ${preconfig}
}

case "$1" in
	deconfig)
		del_config "$1"
		deconfig_interface
	;;
	renew|bound)
		tst_config "$1"
		setup_interface
	;;
	renew_timeout)
		renew_timeout
	;;
esac

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user

exit 0
