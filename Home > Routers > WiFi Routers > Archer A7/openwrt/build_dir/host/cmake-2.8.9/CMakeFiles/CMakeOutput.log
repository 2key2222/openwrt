The system is: Linux - 4.4.0-142-generic - i686
Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /usr/bin/gcc 
Build flags: 
Id flags: 

The output was:
0


Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "a.out"

The C compiler identification is GNU, found in "/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CompilerIdC/a.out"

Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: /usr/bin/g++ 
Build flags: 
Id flags: 

The output was:
0


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "a.out"

The CXX compiler identification is GNU, found in "/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CompilerIdCXX/a.out"

Determining if the C compiler works passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec610636579/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec610636579.dir/build.make CMakeFiles/cmTryCompileExec610636579.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec610636579.dir/testCCompiler.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec610636579.dir/testCCompiler.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/testCCompiler.c
Linking C executable cmTryCompileExec610636579
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec610636579.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec610636579.dir/testCCompiler.c.o  -o cmTryCompileExec610636579 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Detecting C compiler ABI info compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1614641690/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1614641690.dir/build.make CMakeFiles/cmTryCompileExec1614641690.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CMakeCCompilerABI.c
Linking C executable cmTryCompileExec1614641690
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1614641690.dir/link.txt --verbose=1
/usr/bin/gcc       -v CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o  -o cmTryCompileExec1614641690 -rdynamic  
Using built-in specs.
COLLECT_GCC=/usr/bin/gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-linux-gnu/4.8/lto-wrapper
Target: i686-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.4' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-i386 --with-arch-directory=i386 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-targets=all --enable-multiarch --disable-werror --with-arch-32=i686 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=i686-linux-gnu --host=i686-linux-gnu --target=i686-linux-gnu
Thread model: posix
gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4) 
COMPILER_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib/:/lib/i386-linux-gnu/:/lib/../lib/:/usr/lib/i386-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-o' 'cmTryCompileExec1614641690' '-rdynamic' '-mtune=generic' '-march=i686'
 /usr/lib/gcc/i686-linux-gnu/4.8/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_i386 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib/ld-linux.so.2 -z relro -o cmTryCompileExec1614641690 /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o /usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o -L/usr/lib/gcc/i686-linux-gnu/4.8 -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib -L/lib/i386-linux-gnu -L/lib/../lib -L/usr/lib/i386-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/i686-linux-gnu/4.8/../../.. CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/i686-linux-gnu/4.8/crtend.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Parsed C implicit link information from above output:
  link line regex: [^( *|.*[/\])(ld|ld|collect2)[^/\]*( |$)]
  ignore line: [Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp]
  ignore line: []
  ignore line: [Run Build Command:/usr/bin/make "cmTryCompileExec1614641690/fast"]
  ignore line: [make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp']
  ignore line: [make -f CMakeFiles/cmTryCompileExec1614641690.dir/build.make CMakeFiles/cmTryCompileExec1614641690.dir/build]
  ignore line: [make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp']
  ignore line: [/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1]
  ignore line: [Building C object CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o]
  ignore line: [/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CMakeCCompilerABI.c]
  ignore line: [Linking C executable cmTryCompileExec1614641690]
  ignore line: [/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1614641690.dir/link.txt --verbose=1]
  ignore line: [/usr/bin/gcc       -v CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o  -o cmTryCompileExec1614641690 -rdynamic  ]
  ignore line: [Using built-in specs.]
  ignore line: [COLLECT_GCC=/usr/bin/gcc]
  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-linux-gnu/4.8/lto-wrapper]
  ignore line: [Target: i686-linux-gnu]
  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.4' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-i386 --with-arch-directory=i386 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-targets=all --enable-multiarch --disable-werror --with-arch-32=i686 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=i686-linux-gnu --host=i686-linux-gnu --target=i686-linux-gnu]
  ignore line: [Thread model: posix]
  ignore line: [gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4) ]
  ignore line: [COMPILER_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/]
  ignore line: [LIBRARY_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib/:/lib/i386-linux-gnu/:/lib/../lib/:/usr/lib/i386-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../:/lib/:/usr/lib/]
  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTryCompileExec1614641690' '-rdynamic' '-mtune=generic' '-march=i686']
  link line: [ /usr/lib/gcc/i686-linux-gnu/4.8/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_i386 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib/ld-linux.so.2 -z relro -o cmTryCompileExec1614641690 /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o /usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o -L/usr/lib/gcc/i686-linux-gnu/4.8 -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib -L/lib/i386-linux-gnu -L/lib/../lib -L/usr/lib/i386-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/i686-linux-gnu/4.8/../../.. CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/i686-linux-gnu/4.8/crtend.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o]
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/collect2] ==> ignore
    arg [--sysroot=/] ==> ignore
    arg [--build-id] ==> ignore
    arg [--eh-frame-hdr] ==> ignore
    arg [-m] ==> ignore
    arg [elf_i386] ==> ignore
    arg [--hash-style=gnu] ==> ignore
    arg [--as-needed] ==> ignore
    arg [-export-dynamic] ==> ignore
    arg [-dynamic-linker] ==> ignore
    arg [/lib/ld-linux.so.2] ==> ignore
    arg [-zrelro] ==> ignore
    arg [-o] ==> ignore
    arg [cmTryCompileExec1614641690] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o] ==> ignore
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib]
    arg [-L/lib/i386-linux-gnu] ==> dir [/lib/i386-linux-gnu]
    arg [-L/lib/../lib] ==> dir [/lib/../lib]
    arg [-L/usr/lib/i386-linux-gnu] ==> dir [/usr/lib/i386-linux-gnu]
    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../..] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../..]
    arg [CMakeFiles/cmTryCompileExec1614641690.dir/CMakeCCompilerABI.c.o] ==> ignore
    arg [-lgcc] ==> lib [gcc]
    arg [--as-needed] ==> ignore
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [--no-as-needed] ==> ignore
    arg [-lc] ==> lib [c]
    arg [-lgcc] ==> lib [gcc]
    arg [--as-needed] ==> ignore
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [--no-as-needed] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/crtend.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o] ==> ignore
  remove lib [gcc]
  remove lib [gcc_s]
  remove lib [gcc]
  remove lib [gcc_s]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8] ==> [/usr/lib/gcc/i686-linux-gnu/4.8]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu] ==> [/usr/lib/i386-linux-gnu]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib] ==> [/usr/lib]
  collapse dir [/lib/i386-linux-gnu] ==> [/lib/i386-linux-gnu]
  collapse dir [/lib/../lib] ==> [/lib]
  collapse dir [/usr/lib/i386-linux-gnu] ==> [/usr/lib/i386-linux-gnu]
  collapse dir [/usr/lib/../lib] ==> [/usr/lib]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../..] ==> [/usr/lib]
  implicit libs: [c]
  implicit dirs: [/usr/lib/gcc/i686-linux-gnu/4.8;/usr/lib/i386-linux-gnu;/usr/lib;/lib/i386-linux-gnu;/lib]


Determining if the CXX compiler works passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2770357122/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2770357122.dir/build.make CMakeFiles/cmTryCompileExec2770357122.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2770357122.dir/testCXXCompiler.cxx.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec2770357122.dir/testCXXCompiler.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/testCXXCompiler.cxx
Linking CXX executable cmTryCompileExec2770357122
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2770357122.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2770357122.dir/testCXXCompiler.cxx.o  -o cmTryCompileExec2770357122 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Detecting CXX compiler ABI info compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3707948036/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3707948036.dir/build.make CMakeFiles/cmTryCompileExec3707948036.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CMakeCXXCompilerABI.cpp
Linking CXX executable cmTryCompileExec3707948036
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3707948036.dir/link.txt --verbose=1
/usr/bin/g++        -v CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o  -o cmTryCompileExec3707948036 -rdynamic  
Using built-in specs.
COLLECT_GCC=/usr/bin/g++
COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-linux-gnu/4.8/lto-wrapper
Target: i686-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.4' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-i386 --with-arch-directory=i386 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-targets=all --enable-multiarch --disable-werror --with-arch-32=i686 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=i686-linux-gnu --host=i686-linux-gnu --target=i686-linux-gnu
Thread model: posix
gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4) 
COMPILER_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib/:/lib/i386-linux-gnu/:/lib/../lib/:/usr/lib/i386-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-o' 'cmTryCompileExec3707948036' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=i686'
 /usr/lib/gcc/i686-linux-gnu/4.8/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_i386 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib/ld-linux.so.2 -z relro -o cmTryCompileExec3707948036 /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o /usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o -L/usr/lib/gcc/i686-linux-gnu/4.8 -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib -L/lib/i386-linux-gnu -L/lib/../lib -L/usr/lib/i386-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/i686-linux-gnu/4.8/../../.. CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/i686-linux-gnu/4.8/crtend.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Parsed CXX implicit link information from above output:
  link line regex: [^( *|.*[/\])(ld|ld|collect2)[^/\]*( |$)]
  ignore line: [Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp]
  ignore line: []
  ignore line: [Run Build Command:/usr/bin/make "cmTryCompileExec3707948036/fast"]
  ignore line: [make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp']
  ignore line: [make -f CMakeFiles/cmTryCompileExec3707948036.dir/build.make CMakeFiles/cmTryCompileExec3707948036.dir/build]
  ignore line: [make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp']
  ignore line: [/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1]
  ignore line: [Building CXX object CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o]
  ignore line: [/usr/bin/g++     -o CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CMakeCXXCompilerABI.cpp]
  ignore line: [Linking CXX executable cmTryCompileExec3707948036]
  ignore line: [/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3707948036.dir/link.txt --verbose=1]
  ignore line: [/usr/bin/g++        -v CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o  -o cmTryCompileExec3707948036 -rdynamic  ]
  ignore line: [Using built-in specs.]
  ignore line: [COLLECT_GCC=/usr/bin/g++]
  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-linux-gnu/4.8/lto-wrapper]
  ignore line: [Target: i686-linux-gnu]
  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.4' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-i386 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-i386 --with-arch-directory=i386 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-targets=all --enable-multiarch --disable-werror --with-arch-32=i686 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=i686-linux-gnu --host=i686-linux-gnu --target=i686-linux-gnu]
  ignore line: [Thread model: posix]
  ignore line: [gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4) ]
  ignore line: [COMPILER_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/]
  ignore line: [LIBRARY_PATH=/usr/lib/gcc/i686-linux-gnu/4.8/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib/:/lib/i386-linux-gnu/:/lib/../lib/:/usr/lib/i386-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/i686-linux-gnu/4.8/../../../:/lib/:/usr/lib/]
  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTryCompileExec3707948036' '-rdynamic' '-shared-libgcc' '-mtune=generic' '-march=i686']
  link line: [ /usr/lib/gcc/i686-linux-gnu/4.8/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_i386 --hash-style=gnu --as-needed -export-dynamic -dynamic-linker /lib/ld-linux.so.2 -z relro -o cmTryCompileExec3707948036 /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o /usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o -L/usr/lib/gcc/i686-linux-gnu/4.8 -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu -L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib -L/lib/i386-linux-gnu -L/lib/../lib -L/usr/lib/i386-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/i686-linux-gnu/4.8/../../.. CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/i686-linux-gnu/4.8/crtend.o /usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o]
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/collect2] ==> ignore
    arg [--sysroot=/] ==> ignore
    arg [--build-id] ==> ignore
    arg [--eh-frame-hdr] ==> ignore
    arg [-m] ==> ignore
    arg [elf_i386] ==> ignore
    arg [--hash-style=gnu] ==> ignore
    arg [--as-needed] ==> ignore
    arg [-export-dynamic] ==> ignore
    arg [-dynamic-linker] ==> ignore
    arg [/lib/ld-linux.so.2] ==> ignore
    arg [-zrelro] ==> ignore
    arg [-o] ==> ignore
    arg [cmTryCompileExec3707948036] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crt1.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crti.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/crtbegin.o] ==> ignore
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib]
    arg [-L/lib/i386-linux-gnu] ==> dir [/lib/i386-linux-gnu]
    arg [-L/lib/../lib] ==> dir [/lib/../lib]
    arg [-L/usr/lib/i386-linux-gnu] ==> dir [/usr/lib/i386-linux-gnu]
    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
    arg [-L/usr/lib/gcc/i686-linux-gnu/4.8/../../..] ==> dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../..]
    arg [CMakeFiles/cmTryCompileExec3707948036.dir/CMakeCXXCompilerABI.cpp.o] ==> ignore
    arg [-lstdc++] ==> lib [stdc++]
    arg [-lm] ==> lib [m]
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [-lgcc] ==> lib [gcc]
    arg [-lc] ==> lib [c]
    arg [-lgcc_s] ==> lib [gcc_s]
    arg [-lgcc] ==> lib [gcc]
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/crtend.o] ==> ignore
    arg [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu/crtn.o] ==> ignore
  remove lib [gcc_s]
  remove lib [gcc]
  remove lib [gcc_s]
  remove lib [gcc]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8] ==> [/usr/lib/gcc/i686-linux-gnu/4.8]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../i386-linux-gnu] ==> [/usr/lib/i386-linux-gnu]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../../../lib] ==> [/usr/lib]
  collapse dir [/lib/i386-linux-gnu] ==> [/lib/i386-linux-gnu]
  collapse dir [/lib/../lib] ==> [/lib]
  collapse dir [/usr/lib/i386-linux-gnu] ==> [/usr/lib/i386-linux-gnu]
  collapse dir [/usr/lib/../lib] ==> [/usr/lib]
  collapse dir [/usr/lib/gcc/i686-linux-gnu/4.8/../../..] ==> [/usr/lib]
  implicit libs: [stdc++;m;c]
  implicit dirs: [/usr/lib/gcc/i686-linux-gnu/4.8;/usr/lib/i386-linux-gnu;/usr/lib;/lib/i386-linux-gnu;/lib]


Determining if the include file iostream exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1932462620/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1932462620.dir/build.make CMakeFiles/cmTryCompileExec1932462620.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1932462620.dir/CheckIncludeFile.cxx.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec1932462620.dir/CheckIncludeFile.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.cxx
Linking CXX executable cmTryCompileExec1932462620
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1932462620.dir/link.txt --verbose=1
/usr/bin/g++           CMakeFiles/cmTryCompileExec1932462620.dir/CheckIncludeFile.cxx.o  -o cmTryCompileExec1932462620 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the CXX compiler has std namespace passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2648240739/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2648240739.dir/build.make CMakeFiles/cmTryCompileExec2648240739.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2648240739.dir/TestForSTDNamespace.cxx.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec2648240739.dir/TestForSTDNamespace.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/TestForSTDNamespace.cxx
Linking CXX executable cmTryCompileExec2648240739
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2648240739.dir/link.txt --verbose=1
/usr/bin/g++           CMakeFiles/cmTryCompileExec2648240739.dir/TestForSTDNamespace.cxx.o  -o cmTryCompileExec2648240739 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the CXX compiler understands ansi for scopes passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1812718172/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1812718172.dir/build.make CMakeFiles/cmTryCompileExec1812718172.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1812718172.dir/TestForAnsiForScope.cxx.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec1812718172.dir/TestForAnsiForScope.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/TestForAnsiForScope.cxx
Linking CXX executable cmTryCompileExec1812718172
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1812718172.dir/link.txt --verbose=1
/usr/bin/g++           CMakeFiles/cmTryCompileExec1812718172.dir/TestForAnsiForScope.cxx.o  -o cmTryCompileExec1812718172 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the CXX compiler has sstream passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4145445657/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4145445657.dir/build.make CMakeFiles/cmTryCompileExec4145445657.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec4145445657.dir/TestForSSTREAM.cxx.o
/usr/bin/g++     -o CMakeFiles/cmTryCompileExec4145445657.dir/TestForSSTREAM.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/TestForSSTREAM.cxx
Linking CXX executable cmTryCompileExec4145445657
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4145445657.dir/link.txt --verbose=1
/usr/bin/g++           CMakeFiles/cmTryCompileExec4145445657.dir/TestForSSTREAM.cxx.o  -o cmTryCompileExec4145445657 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the unsetenv exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec851496892/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec851496892.dir/build.make CMakeFiles/cmTryCompileExec851496892.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec851496892.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec851496892.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec851496892
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec851496892.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec851496892.dir/CheckSymbolExists.c.o  -o cmTryCompileExec851496892 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdlib.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef unsetenv
  return ((int*)(&unsetenv))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Checking whether header cstdio is available compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2384896127/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2384896127.dir/build.make CMakeFiles/cmTryCompileExec2384896127.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2384896127.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_CSTDIO  -o CMakeFiles/cmTryCompileExec2384896127.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2384896127
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2384896127.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2384896127.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2384896127 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking for Large File Support compiled and ran with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1389777852/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1389777852.dir/build.make CMakeFiles/cmTryCompileExec1389777852.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1389777852.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_LFS_WORKS -DKWSYS_CXX_HAS_CSTDIO=1  -o CMakeFiles/cmTryCompileExec1389777852.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1389777852
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1389777852.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1389777852.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1389777852 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether STL classes are in std namespace compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1948618550/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1948618550.dir/build.make CMakeFiles/cmTryCompileExec1948618550.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1948618550.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_HAVE_STD  -o CMakeFiles/cmTryCompileExec1948618550.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1948618550
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1948618550.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1948618550.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1948618550 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether ANSI stream headers are available compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec951274923/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec951274923.dir/build.make CMakeFiles/cmTryCompileExec951274923.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec951274923.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_USE_ANSI  -o CMakeFiles/cmTryCompileExec951274923.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec951274923
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec951274923.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec951274923.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec951274923 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether ANSI streams are in std namespace compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3587811060/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3587811060.dir/build.make CMakeFiles/cmTryCompileExec3587811060.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec3587811060.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_HAVE_STD  -o CMakeFiles/cmTryCompileExec3587811060.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec3587811060
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3587811060.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec3587811060.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec3587811060 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether ANSI string stream is available compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2752176947/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2752176947.dir/build.make CMakeFiles/cmTryCompileExec2752176947.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2752176947.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_USE_SSTREAM  -o CMakeFiles/cmTryCompileExec2752176947.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2752176947
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2752176947.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2752176947.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2752176947 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether header cstddef is available compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3347516251/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3347516251.dir/build.make CMakeFiles/cmTryCompileExec3347516251.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec3347516251.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_CSTDDEF  -o CMakeFiles/cmTryCompileExec3347516251.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec3347516251
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3347516251.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec3347516251.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec3347516251 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether stl string has operator!= for char* compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2393661043/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2393661043.dir/build.make CMakeFiles/cmTryCompileExec2393661043.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2393661043.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_STRING_HAVE_NEQ_CHAR -DKWSYS_STL_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec2393661043.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2393661043
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2393661043.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2393661043.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2393661043 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether stl has iterator_traits compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec857188294/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec857188294.dir/build.make CMakeFiles/cmTryCompileExec857188294.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec857188294.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_HAS_ITERATOR_TRAITS -DKWSYS_STL_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec857188294.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec857188294
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec857188294.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec857188294.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec857188294 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether stl has standard template allocator compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1645750774/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1645750774.dir/build.make CMakeFiles/cmTryCompileExec1645750774.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1645750774.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_HAS_ALLOCATOR_TEMPLATE -DKWSYS_STL_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec1645750774.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1645750774
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1645750774.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1645750774.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1645750774 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking for rebind member of stl allocator compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec823220077/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec823220077.dir/build.make CMakeFiles/cmTryCompileExec823220077.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec823220077.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_HAS_ALLOCATOR_REBIND -DKWSYS_STL_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec823220077.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec823220077
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec823220077.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec823220077.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec823220077 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether stl containers support allocator objects. compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2179655235/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2179655235.dir/build.make CMakeFiles/cmTryCompileExec2179655235.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2179655235.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STL_HAS_ALLOCATOR_OBJECTS -DKWSYS_STL_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec2179655235.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2179655235
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2179655235.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2179655235.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2179655235 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether ios has binary openmode compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec190980141/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec190980141.dir/build.make CMakeFiles/cmTryCompileExec190980141.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec190980141.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_HAVE_BINARY -DKWSYS_IOS_USE_ANSI=1 -DKWSYS_IOS_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec190980141.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec190980141
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec190980141.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec190980141.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec190980141 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking for member template support compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2046888246/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2046888246.dir/build.make CMakeFiles/cmTryCompileExec2046888246.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2046888246.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_MEMBER_TEMPLATES  -o CMakeFiles/cmTryCompileExec2046888246.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2046888246
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2046888246.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2046888246.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2046888246 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking for standard template specialization syntax compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2745097158/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2745097158.dir/build.make CMakeFiles/cmTryCompileExec2745097158.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2745097158.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_FULL_SPECIALIZATION  -o CMakeFiles/cmTryCompileExec2745097158.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec2745097158
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2745097158.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec2745097158.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec2745097158 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether argument dependent lookup is supported compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4112999181/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4112999181.dir/build.make CMakeFiles/cmTryCompileExec4112999181.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec4112999181.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_ARGUMENT_DEPENDENT_LOOKUP  -o CMakeFiles/cmTryCompileExec4112999181.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec4112999181
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4112999181.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec4112999181.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec4112999181 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether struct stat has st_mtim member compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1856324702/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1856324702.dir/build.make CMakeFiles/cmTryCompileExec1856324702.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1856324702.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_STAT_HAS_ST_MTIM  -o CMakeFiles/cmTryCompileExec1856324702.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1856324702
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1856324702.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1856324702.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1856324702 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether C++ compiler has 'long long' compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1825362898/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1825362898.dir/build.make CMakeFiles/cmTryCompileExec1825362898.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1825362898.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_LONG_LONG  -o CMakeFiles/cmTryCompileExec1825362898.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1825362898
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1825362898.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1825362898.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1825362898 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking for C type size macros compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1121141037/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1121141037.dir/build.make CMakeFiles/cmTryCompileExec1121141037.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1121141037.dir/kwsysPlatformTestsC.c.o
/usr/bin/gcc  -DTEST_KWSYS_C_TYPE_MACROS  -o CMakeFiles/cmTryCompileExec1121141037.dir/kwsysPlatformTestsC.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsC.c
Linking C executable cmTryCompileExec1121141037
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1121141037.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec1121141037.dir/kwsysPlatformTestsC.c.o  -o cmTryCompileExec1121141037 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Determining if the include file sys/types.h exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec459405623/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec459405623.dir/build.make CMakeFiles/cmTryCompileExec459405623.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec459405623.dir/CheckIncludeFile.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec459405623.dir/CheckIncludeFile.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.c
Linking C executable cmTryCompileExec459405623
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec459405623.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec459405623.dir/CheckIncludeFile.c.o  -o cmTryCompileExec459405623 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the include file stdint.h exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4166949855/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4166949855.dir/build.make CMakeFiles/cmTryCompileExec4166949855.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4166949855.dir/CheckIncludeFile.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4166949855.dir/CheckIncludeFile.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.c
Linking C executable cmTryCompileExec4166949855
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4166949855.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec4166949855.dir/CheckIncludeFile.c.o  -o cmTryCompileExec4166949855 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the include file stddef.h exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1931540379/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1931540379.dir/build.make CMakeFiles/cmTryCompileExec1931540379.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1931540379.dir/CheckIncludeFile.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1931540379.dir/CheckIncludeFile.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.c
Linking C executable cmTryCompileExec1931540379
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1931540379.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec1931540379.dir/CheckIncludeFile.c.o  -o cmTryCompileExec1931540379 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of char passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2732031522/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2732031522.dir/build.make CMakeFiles/cmTryCompileExec2732031522.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2732031522.dir/KWSYS_SIZEOF_CHAR.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2732031522.dir/KWSYS_SIZEOF_CHAR.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/KWSYS_SIZEOF_CHAR.c
Linking C executable cmTryCompileExec2732031522
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2732031522.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec2732031522.dir/KWSYS_SIZEOF_CHAR.c.o  -o cmTryCompileExec2732031522 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Checking whether char is signed compiled and ran with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec363412909/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec363412909.dir/build.make CMakeFiles/cmTryCompileExec363412909.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec363412909.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CHAR_IS_SIGNED  -o CMakeFiles/cmTryCompileExec363412909.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec363412909
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec363412909.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec363412909.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec363412909 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking if istream supports long long compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec765772862/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec765772862.dir/build.make CMakeFiles/cmTryCompileExec765772862.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec765772862.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_HAS_ISTREAM_LONG_LONG -DKWSYS_IOS_USE_ANSI=1 -DKWSYS_IOS_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec765772862.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec765772862
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec765772862.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec765772862.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec765772862 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking if ostream supports long long compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3847220979/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3847220979.dir/build.make CMakeFiles/cmTryCompileExec3847220979.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec3847220979.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_IOS_HAS_OSTREAM_LONG_LONG -DKWSYS_IOS_USE_ANSI=1 -DKWSYS_IOS_HAVE_STD=1  -o CMakeFiles/cmTryCompileExec3847220979.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec3847220979
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3847220979.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec3847220979.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec3847220979 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether C compiler has ptrdiff_t in stddef.h compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec309450191/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec309450191.dir/build.make CMakeFiles/cmTryCompileExec309450191.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec309450191.dir/kwsysPlatformTestsC.c.o
/usr/bin/gcc  -DTEST_KWSYS_C_HAS_PTRDIFF_T  -o CMakeFiles/cmTryCompileExec309450191.dir/kwsysPlatformTestsC.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsC.c
Linking C executable cmTryCompileExec309450191
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec309450191.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec309450191.dir/kwsysPlatformTestsC.c.o  -o cmTryCompileExec309450191 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether C compiler has ssize_t in unistd.h compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec739115926/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec739115926.dir/build.make CMakeFiles/cmTryCompileExec739115926.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec739115926.dir/kwsysPlatformTestsC.c.o
/usr/bin/gcc  -DTEST_KWSYS_C_HAS_SSIZE_T  -o CMakeFiles/cmTryCompileExec739115926.dir/kwsysPlatformTestsC.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsC.c
Linking C executable cmTryCompileExec739115926
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec739115926.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec739115926.dir/kwsysPlatformTestsC.c.o  -o cmTryCompileExec739115926 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether CXX compiler has setenv compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec93604227/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec93604227.dir/build.make CMakeFiles/cmTryCompileExec93604227.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec93604227.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_SETENV  -o CMakeFiles/cmTryCompileExec93604227.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec93604227
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec93604227.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec93604227.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec93604227 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Checking whether CXX compiler has unsetenv compiled with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1084657819/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1084657819.dir/build.make CMakeFiles/cmTryCompileExec1084657819.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1084657819.dir/kwsysPlatformTestsCXX.cxx.o
/usr/bin/g++   -DTEST_KWSYS_CXX_HAS_UNSETENV  -o CMakeFiles/cmTryCompileExec1084657819.dir/kwsysPlatformTestsCXX.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/kwsysPlatformTestsCXX.cxx
Linking CXX executable cmTryCompileExec1084657819
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1084657819.dir/link.txt --verbose=1
/usr/bin/g++          CMakeFiles/cmTryCompileExec1084657819.dir/kwsysPlatformTestsCXX.cxx.o  -o cmTryCompileExec1084657819 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Source/kwsys/CMakeFiles/CMakeTmp'


Determining if the function gethostbyname exists in the c passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3937787562/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3937787562.dir/build.make CMakeFiles/cmTryCompileExec3937787562.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3937787562.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -DCHECK_FUNCTION_EXISTS=gethostbyname   -o CMakeFiles/cmTryCompileExec3937787562.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3937787562
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3937787562.dir/link.txt --verbose=1
/usr/bin/gcc      -DCHECK_FUNCTION_EXISTS=gethostbyname    CMakeFiles/cmTryCompileExec3937787562.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3937787562 -rdynamic -lc 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function dlopen exists in the dl passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2412369831/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2412369831.dir/build.make CMakeFiles/cmTryCompileExec2412369831.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2412369831.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -DCHECK_FUNCTION_EXISTS=dlopen   -o CMakeFiles/cmTryCompileExec2412369831.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2412369831
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2412369831.dir/link.txt --verbose=1
/usr/bin/gcc      -DCHECK_FUNCTION_EXISTS=dlopen    CMakeFiles/cmTryCompileExec2412369831.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2412369831 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the include file features.h exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3641782645/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3641782645.dir/build.make CMakeFiles/cmTryCompileExec3641782645.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3641782645.dir/CheckIncludeFile.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3641782645.dir/CheckIncludeFile.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.c
Linking C executable cmTryCompileExec3641782645
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3641782645.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3641782645.dir/CheckIncludeFile.c.o  -o cmTryCompileExec3641782645 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files ;stdio.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1309962133/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1309962133.dir/build.make CMakeFiles/cmTryCompileExec1309962133.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1309962133.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1309962133.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1309962133
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1309962133.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1309962133.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1309962133 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec851587096/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec851587096.dir/build.make CMakeFiles/cmTryCompileExec851587096.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec851587096.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec851587096.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec851587096
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec851587096.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec851587096.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec851587096 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1461717782/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1461717782.dir/build.make CMakeFiles/cmTryCompileExec1461717782.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1461717782.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1461717782.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1461717782
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1461717782.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1461717782.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1461717782 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3436997528/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3436997528.dir/build.make CMakeFiles/cmTryCompileExec3436997528.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3436997528.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3436997528.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3436997528
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3436997528.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3436997528.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3436997528 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2341815517/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2341815517.dir/build.make CMakeFiles/cmTryCompileExec2341815517.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2341815517.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2341815517.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2341815517
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2341815517.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2341815517.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2341815517 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3229957294/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3229957294.dir/build.make CMakeFiles/cmTryCompileExec3229957294.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3229957294.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3229957294.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3229957294
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3229957294.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3229957294.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3229957294 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2590584961/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2590584961.dir/build.make CMakeFiles/cmTryCompileExec2590584961.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2590584961.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2590584961.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2590584961
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2590584961.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2590584961.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2590584961 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1575054490/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1575054490.dir/build.make CMakeFiles/cmTryCompileExec1575054490.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1575054490.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1575054490.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1575054490
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1575054490.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1575054490.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1575054490 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2227356759/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2227356759.dir/build.make CMakeFiles/cmTryCompileExec2227356759.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2227356759.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2227356759.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2227356759
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2227356759.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2227356759.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2227356759 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3168998668/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3168998668.dir/build.make CMakeFiles/cmTryCompileExec3168998668.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3168998668.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3168998668.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3168998668
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3168998668.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3168998668.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3168998668 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2680546532/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2680546532.dir/build.make CMakeFiles/cmTryCompileExec2680546532.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2680546532.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2680546532.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2680546532
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2680546532.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2680546532.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2680546532 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1037516495/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1037516495.dir/build.make CMakeFiles/cmTryCompileExec1037516495.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1037516495.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1037516495.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1037516495
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1037516495.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1037516495.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1037516495 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3671049843/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3671049843.dir/build.make CMakeFiles/cmTryCompileExec3671049843.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3671049843.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3671049843.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3671049843
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3671049843.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3671049843.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3671049843 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec306900761/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec306900761.dir/build.make CMakeFiles/cmTryCompileExec306900761.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec306900761.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec306900761.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec306900761
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec306900761.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec306900761.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec306900761 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1837668837/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1837668837.dir/build.make CMakeFiles/cmTryCompileExec1837668837.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1837668837.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1837668837.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1837668837
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1837668837.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1837668837.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1837668837 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3636910579/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3636910579.dir/build.make CMakeFiles/cmTryCompileExec3636910579.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3636910579.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3636910579.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3636910579
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3636910579.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3636910579.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3636910579 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3241057957/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3241057957.dir/build.make CMakeFiles/cmTryCompileExec3241057957.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3241057957.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3241057957.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3241057957
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3241057957.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3241057957.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3241057957 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3078619121/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3078619121.dir/build.make CMakeFiles/cmTryCompileExec3078619121.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3078619121.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3078619121.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3078619121
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3078619121.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3078619121.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3078619121 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4028973327/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4028973327.dir/build.make CMakeFiles/cmTryCompileExec4028973327.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4028973327.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4028973327.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec4028973327
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4028973327.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4028973327.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec4028973327 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4234135159/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4234135159.dir/build.make CMakeFiles/cmTryCompileExec4234135159.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4234135159.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4234135159.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec4234135159
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4234135159.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4234135159.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec4234135159 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec411747206/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec411747206.dir/build.make CMakeFiles/cmTryCompileExec411747206.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec411747206.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec411747206.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec411747206
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec411747206.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec411747206.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec411747206 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec182456813/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec182456813.dir/build.make CMakeFiles/cmTryCompileExec182456813.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec182456813.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec182456813.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec182456813
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec182456813.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec182456813.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec182456813 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3878448482/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3878448482.dir/build.make CMakeFiles/cmTryCompileExec3878448482.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3878448482.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3878448482.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3878448482
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3878448482.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3878448482.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3878448482 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec707805793/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec707805793.dir/build.make CMakeFiles/cmTryCompileExec707805793.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec707805793.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec707805793.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec707805793
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec707805793.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec707805793.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec707805793 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2359465901/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2359465901.dir/build.make CMakeFiles/cmTryCompileExec2359465901.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2359465901.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2359465901.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2359465901
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2359465901.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2359465901.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2359465901 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4232868215/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4232868215.dir/build.make CMakeFiles/cmTryCompileExec4232868215.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4232868215.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4232868215.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec4232868215
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4232868215.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4232868215.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec4232868215 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2019603441/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2019603441.dir/build.make CMakeFiles/cmTryCompileExec2019603441.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2019603441.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2019603441.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2019603441
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2019603441.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2019603441.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2019603441 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1701537003/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1701537003.dir/build.make CMakeFiles/cmTryCompileExec1701537003.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1701537003.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1701537003.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1701537003
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1701537003.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1701537003.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1701537003 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec246490369/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec246490369.dir/build.make CMakeFiles/cmTryCompileExec246490369.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec246490369.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec246490369.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec246490369
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec246490369.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec246490369.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec246490369 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4245783318/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4245783318.dir/build.make CMakeFiles/cmTryCompileExec4245783318.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4245783318.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4245783318.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec4245783318
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4245783318.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4245783318.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec4245783318 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2099157920/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2099157920.dir/build.make CMakeFiles/cmTryCompileExec2099157920.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2099157920.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2099157920.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2099157920
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2099157920.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2099157920.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2099157920 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1746153600/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1746153600.dir/build.make CMakeFiles/cmTryCompileExec1746153600.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1746153600.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1746153600.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1746153600
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1746153600.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1746153600.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1746153600 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec288646119/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec288646119.dir/build.make CMakeFiles/cmTryCompileExec288646119.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec288646119.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec288646119.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec288646119
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec288646119.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec288646119.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec288646119 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3169509008/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3169509008.dir/build.make CMakeFiles/cmTryCompileExec3169509008.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3169509008.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3169509008.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3169509008
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3169509008.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3169509008.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3169509008 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec409464914/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec409464914.dir/build.make CMakeFiles/cmTryCompileExec409464914.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec409464914.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec409464914.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec409464914
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec409464914.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec409464914.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec409464914 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h;sys/ioctl.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec299610099/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec299610099.dir/build.make CMakeFiles/cmTryCompileExec299610099.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec299610099.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec299610099.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec299610099
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec299610099.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec299610099.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec299610099 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h;sys/ioctl.h;sys/utsname.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2462250785/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2462250785.dir/build.make CMakeFiles/cmTryCompileExec2462250785.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2462250785.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2462250785.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2462250785
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2462250785.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2462250785.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2462250785 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h;sys/ioctl.h;sys/utsname.h;arpa/tftp.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec824841274/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec824841274.dir/build.make CMakeFiles/cmTryCompileExec824841274.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec824841274.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec824841274.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec824841274
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec824841274.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec824841274.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec824841274 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h;sys/ioctl.h;sys/utsname.h;arpa/tftp.h;errno.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2614576727/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2614576727.dir/build.make CMakeFiles/cmTryCompileExec2614576727.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2614576727.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2614576727.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2614576727
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2614576727.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2614576727.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2614576727 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files stdio.h;stddef.h;sys/types.h;inttypes.h;alloca.h;arpa/inet.h;dlfcn.h;fcntl.h;malloc.h;memory.h;netdb.h;sys/poll.h;assert.h;limits.h;sys/socket.h;netinet/in.h;net/if.h;netinet/if_ether.h;netinet/tcp.h;sys/select.h;utime.h;netinet/in.h;pwd.h;sgtty.h;stdint.h;stdlib.h;string.h;strings.h;sys/param.h;sys/stat.h;sys/time.h;sys/resource.h;termios.h;termio.h;time.h;unistd.h;locale.h;setjmp.h;signal.h;sys/ioctl.h;sys/utsname.h;arpa/tftp.h;errno.h;libgen.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1825390715/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1825390715.dir/build.make CMakeFiles/cmTryCompileExec1825390715.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1825390715.dir/CheckIncludeFiles.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1825390715.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1825390715
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1825390715.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1825390715.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1825390715 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of size_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1562873813/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1562873813.dir/build.make CMakeFiles/cmTryCompileExec1562873813.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1562873813.dir/SIZEOF_SIZE_T.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1562873813.dir/SIZEOF_SIZE_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_SIZE_T.c
Linking C executable cmTryCompileExec1562873813
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1562873813.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1562873813.dir/SIZEOF_SIZE_T.c.o  -o cmTryCompileExec1562873813 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of ssize_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec878283659/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec878283659.dir/build.make CMakeFiles/cmTryCompileExec878283659.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec878283659.dir/SIZEOF_SSIZE_T.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec878283659.dir/SIZEOF_SSIZE_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_SSIZE_T.c
Linking C executable cmTryCompileExec878283659
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec878283659.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec878283659.dir/SIZEOF_SSIZE_T.c.o  -o cmTryCompileExec878283659 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of long long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec296469747/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec296469747.dir/build.make CMakeFiles/cmTryCompileExec296469747.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec296469747.dir/SIZEOF_LONG_LONG.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec296469747.dir/SIZEOF_LONG_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_LONG_LONG.c
Linking C executable cmTryCompileExec296469747
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec296469747.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec296469747.dir/SIZEOF_LONG_LONG.c.o  -o cmTryCompileExec296469747 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec129827182/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec129827182.dir/build.make CMakeFiles/cmTryCompileExec129827182.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec129827182.dir/SIZEOF_LONG.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec129827182.dir/SIZEOF_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_LONG.c
Linking C executable cmTryCompileExec129827182
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec129827182.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec129827182.dir/SIZEOF_LONG.c.o  -o cmTryCompileExec129827182 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of time_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1279746396/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1279746396.dir/build.make CMakeFiles/cmTryCompileExec1279746396.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1279746396.dir/SIZEOF_TIME_T.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1279746396.dir/SIZEOF_TIME_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_TIME_T.c
Linking C executable cmTryCompileExec1279746396
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1279746396.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1279746396.dir/SIZEOF_TIME_T.c.o  -o cmTryCompileExec1279746396 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the basename exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec264594753/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec264594753.dir/build.make CMakeFiles/cmTryCompileExec264594753.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec264594753.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec264594753.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec264594753
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec264594753.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec264594753.dir/CheckSymbolExists.c.o  -o cmTryCompileExec264594753 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef basename
  return ((int*)(&basename))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the socket exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3577407477/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3577407477.dir/build.make CMakeFiles/cmTryCompileExec3577407477.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3577407477.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3577407477.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3577407477
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3577407477.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3577407477.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3577407477 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef socket
  return ((int*)(&socket))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the poll exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2052572404/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2052572404.dir/build.make CMakeFiles/cmTryCompileExec2052572404.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2052572404.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2052572404.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2052572404
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2052572404.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2052572404.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2052572404 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef poll
  return ((int*)(&poll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the select exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3277405824/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3277405824.dir/build.make CMakeFiles/cmTryCompileExec3277405824.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3277405824.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3277405824.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3277405824
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3277405824.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3277405824.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3277405824 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef select
  return ((int*)(&select))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strdup exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2450069589/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2450069589.dir/build.make CMakeFiles/cmTryCompileExec2450069589.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2450069589.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2450069589.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2450069589
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2450069589.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2450069589.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2450069589 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strdup
  return ((int*)(&strdup))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strstr exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1863513060/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1863513060.dir/build.make CMakeFiles/cmTryCompileExec1863513060.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1863513060.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1863513060.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1863513060
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1863513060.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1863513060.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1863513060 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strstr
  return ((int*)(&strstr))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strtok_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3721871743/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3721871743.dir/build.make CMakeFiles/cmTryCompileExec3721871743.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3721871743.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3721871743.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3721871743
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3721871743.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3721871743.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3721871743 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtok_r
  return ((int*)(&strtok_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strftime exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2445327041/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2445327041.dir/build.make CMakeFiles/cmTryCompileExec2445327041.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2445327041.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2445327041.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2445327041
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2445327041.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2445327041.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2445327041 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strftime
  return ((int*)(&strftime))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the uname exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3310941113/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3310941113.dir/build.make CMakeFiles/cmTryCompileExec3310941113.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3310941113.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3310941113.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3310941113
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3310941113.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3310941113.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3310941113 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef uname
  return ((int*)(&uname))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strcasecmp exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2577461171/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2577461171.dir/build.make CMakeFiles/cmTryCompileExec2577461171.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2577461171.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2577461171.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2577461171
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2577461171.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2577461171.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2577461171 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strcasecmp
  return ((int*)(&strcasecmp))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gethostbyaddr exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1015411385/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1015411385.dir/build.make CMakeFiles/cmTryCompileExec1015411385.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1015411385.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1015411385.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1015411385
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1015411385.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1015411385.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1015411385 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gethostbyaddr
  return ((int*)(&gethostbyaddr))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gettimeofday exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1853916884/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1853916884.dir/build.make CMakeFiles/cmTryCompileExec1853916884.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1853916884.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1853916884.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1853916884
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1853916884.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1853916884.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1853916884 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gettimeofday
  return ((int*)(&gettimeofday))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the inet_addr exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1261667990/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1261667990.dir/build.make CMakeFiles/cmTryCompileExec1261667990.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1261667990.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1261667990.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1261667990
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1261667990.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1261667990.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1261667990 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef inet_addr
  return ((int*)(&inet_addr))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the inet_pton exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2957998551/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2957998551.dir/build.make CMakeFiles/cmTryCompileExec2957998551.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2957998551.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2957998551.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2957998551
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2957998551.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2957998551.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2957998551 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef inet_pton
  return ((int*)(&inet_pton))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the inet_ntoa exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2008601815/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2008601815.dir/build.make CMakeFiles/cmTryCompileExec2008601815.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2008601815.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2008601815.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2008601815
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2008601815.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2008601815.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2008601815 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef inet_ntoa
  return ((int*)(&inet_ntoa))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the tcsetattr exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2323004893/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2323004893.dir/build.make CMakeFiles/cmTryCompileExec2323004893.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2323004893.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2323004893.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2323004893
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2323004893.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2323004893.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2323004893 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef tcsetattr
  return ((int*)(&tcsetattr))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the tcgetattr exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2279243265/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2279243265.dir/build.make CMakeFiles/cmTryCompileExec2279243265.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2279243265.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2279243265.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2279243265
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2279243265.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2279243265.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2279243265 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef tcgetattr
  return ((int*)(&tcgetattr))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the perror exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec335154705/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec335154705.dir/build.make CMakeFiles/cmTryCompileExec335154705.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec335154705.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec335154705.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec335154705
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec335154705.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec335154705.dir/CheckSymbolExists.c.o  -o cmTryCompileExec335154705 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef perror
  return ((int*)(&perror))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the setvbuf exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec491984461/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec491984461.dir/build.make CMakeFiles/cmTryCompileExec491984461.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec491984461.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec491984461.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec491984461
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec491984461.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec491984461.dir/CheckSymbolExists.c.o  -o cmTryCompileExec491984461 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef setvbuf
  return ((int*)(&setvbuf))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the sigsetjmp exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec115307319/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec115307319.dir/build.make CMakeFiles/cmTryCompileExec115307319.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec115307319.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec115307319.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec115307319
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec115307319.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec115307319.dir/CheckSymbolExists.c.o  -o cmTryCompileExec115307319 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef sigsetjmp
  return ((int*)(&sigsetjmp))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the getpwuid exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2477152543/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2477152543.dir/build.make CMakeFiles/cmTryCompileExec2477152543.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2477152543.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2477152543.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2477152543
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2477152543.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2477152543.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2477152543 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef getpwuid
  return ((int*)(&getpwuid))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the geteuid exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2558683519/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2558683519.dir/build.make CMakeFiles/cmTryCompileExec2558683519.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2558683519.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2558683519.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2558683519
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2558683519.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2558683519.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2558683519 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef geteuid
  return ((int*)(&geteuid))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the utime exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1807832327/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1807832327.dir/build.make CMakeFiles/cmTryCompileExec1807832327.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1807832327.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1807832327.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1807832327
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1807832327.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1807832327.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1807832327 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef utime
  return ((int*)(&utime))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gmtime_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2134202078/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2134202078.dir/build.make CMakeFiles/cmTryCompileExec2134202078.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2134202078.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2134202078.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2134202078
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2134202078.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2134202078.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2134202078 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gmtime_r
  return ((int*)(&gmtime_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the localtime_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2052534159/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2052534159.dir/build.make CMakeFiles/cmTryCompileExec2052534159.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2052534159.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2052534159.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2052534159
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2052534159.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2052534159.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2052534159 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef localtime_r
  return ((int*)(&localtime_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gethostbyname exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2119595331/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2119595331.dir/build.make CMakeFiles/cmTryCompileExec2119595331.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2119595331.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2119595331.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2119595331
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2119595331.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2119595331.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2119595331 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gethostbyname
  return ((int*)(&gethostbyname))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gethostbyname_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1697166942/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1697166942.dir/build.make CMakeFiles/cmTryCompileExec1697166942.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1697166942.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1697166942.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1697166942
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1697166942.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1697166942.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1697166942 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gethostbyname_r
  return ((int*)(&gethostbyname_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the gethostbyaddr_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1062234441/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1062234441.dir/build.make CMakeFiles/cmTryCompileExec1062234441.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1062234441.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1062234441.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1062234441
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1062234441.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1062234441.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1062234441 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef gethostbyaddr_r
  return ((int*)(&gethostbyaddr_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the signal exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4194947368/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4194947368.dir/build.make CMakeFiles/cmTryCompileExec4194947368.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4194947368.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4194947368.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec4194947368
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4194947368.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4194947368.dir/CheckSymbolExists.c.o  -o cmTryCompileExec4194947368 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef signal
  return ((int*)(&signal))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the SIGALRM exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3592353889/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3592353889.dir/build.make CMakeFiles/cmTryCompileExec3592353889.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3592353889.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3592353889.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3592353889
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3592353889.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3592353889.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3592353889 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef SIGALRM
  return ((int*)(&SIGALRM))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strtoll exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec69188266/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec69188266.dir/build.make CMakeFiles/cmTryCompileExec69188266.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec69188266.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec69188266.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec69188266
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec69188266.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec69188266.dir/CheckSymbolExists.c.o  -o cmTryCompileExec69188266 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strtoll
  return ((int*)(&strtoll))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the strerror_r exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec504798854/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec504798854.dir/build.make CMakeFiles/cmTryCompileExec504798854.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec504798854.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec504798854.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec504798854
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec504798854.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec504798854.dir/CheckSymbolExists.c.o  -o cmTryCompileExec504798854 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef strerror_r
  return ((int*)(&strerror_r))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the siginterrupt exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3462798455/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3462798455.dir/build.make CMakeFiles/cmTryCompileExec3462798455.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3462798455.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3462798455.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3462798455
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3462798455.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3462798455.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3462798455 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef siginterrupt
  return ((int*)(&siginterrupt))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the fork exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2025591476/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2025591476.dir/build.make CMakeFiles/cmTryCompileExec2025591476.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2025591476.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2025591476.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2025591476
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2025591476.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2025591476.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2025591476 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef fork
  return ((int*)(&fork))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the pipe exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3885608338/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3885608338.dir/build.make CMakeFiles/cmTryCompileExec3885608338.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3885608338.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3885608338.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3885608338
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3885608338.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3885608338.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3885608338 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef pipe
  return ((int*)(&pipe))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the ftruncate exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1142234831/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1142234831.dir/build.make CMakeFiles/cmTryCompileExec1142234831.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1142234831.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec1142234831.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1142234831
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1142234831.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec1142234831.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1142234831 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef ftruncate
  return ((int*)(&ftruncate))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the getprotobyname exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec149102288/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec149102288.dir/build.make CMakeFiles/cmTryCompileExec149102288.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec149102288.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec149102288.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec149102288
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec149102288.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec149102288.dir/CheckSymbolExists.c.o  -o cmTryCompileExec149102288 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef getprotobyname
  return ((int*)(&getprotobyname))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the getrlimit exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec395676604/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec395676604.dir/build.make CMakeFiles/cmTryCompileExec395676604.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec395676604.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec395676604.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec395676604
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec395676604.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec395676604.dir/CheckSymbolExists.c.o  -o cmTryCompileExec395676604 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef getrlimit
  return ((int*)(&getrlimit))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the setlocale exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec776569760/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec776569760.dir/build.make CMakeFiles/cmTryCompileExec776569760.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec776569760.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec776569760.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec776569760
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec776569760.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec776569760.dir/CheckSymbolExists.c.o  -o cmTryCompileExec776569760 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef setlocale
  return ((int*)(&setlocale))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the setrlimit exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec372401647/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec372401647.dir/build.make CMakeFiles/cmTryCompileExec372401647.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec372401647.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec372401647.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec372401647
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec372401647.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec372401647.dir/CheckSymbolExists.c.o  -o cmTryCompileExec372401647 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <stdio.h>
#include <stddef.h>
#include <sys/types.h>
#include <inttypes.h>
#include <alloca.h>
#include <arpa/inet.h>
#include <dlfcn.h>
#include <fcntl.h>
#include <malloc.h>
#include <memory.h>
#include <netdb.h>
#include <sys/poll.h>
#include <assert.h>
#include <limits.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>
#include <sys/select.h>
#include <utime.h>
#include <netinet/in.h>
#include <pwd.h>
#include <sgtty.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <termios.h>
#include <termio.h>
#include <time.h>
#include <unistd.h>
#include <locale.h>
#include <setjmp.h>
#include <signal.h>
#include <sys/ioctl.h>
#include <sys/utsname.h>
#include <arpa/tftp.h>
#include <errno.h>
#include <libgen.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef setrlimit
  return ((int*)(&setrlimit))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the sigaction exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3294707097/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3294707097.dir/build.make CMakeFiles/cmTryCompileExec3294707097.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3294707097.dir/CheckSymbolExists.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec3294707097.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3294707097
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3294707097.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec3294707097.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3294707097 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <signal.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef sigaction
  return ((int*)(&sigaction))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing Curl Test HAVE_O_NONBLOCK passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1094876625/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1094876625.dir/build.make CMakeFiles/cmTryCompileExec1094876625.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1094876625.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_O_NONBLOCK   -o CMakeFiles/cmTryCompileExec1094876625.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec1094876625
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1094876625.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_O_NONBLOCK    CMakeFiles/cmTryCompileExec1094876625.dir/CurlTests.c.o  -o cmTryCompileExec1094876625 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test TIME_WITH_SYS_TIME passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec207873211/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec207873211.dir/build.make CMakeFiles/cmTryCompileExec207873211.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec207873211.dir/CurlTests.c.o
/usr/bin/gcc   -DTIME_WITH_SYS_TIME   -o CMakeFiles/cmTryCompileExec207873211.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec207873211
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec207873211.dir/link.txt --verbose=1
/usr/bin/gcc      -DTIME_WITH_SYS_TIME    CMakeFiles/cmTryCompileExec207873211.dir/CurlTests.c.o  -o cmTryCompileExec207873211 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_GETHOSTBYADDR_R_8 passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4013981042/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4013981042.dir/build.make CMakeFiles/cmTryCompileExec4013981042.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4013981042.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_GETHOSTBYADDR_R_8   -o CMakeFiles/cmTryCompileExec4013981042.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec4013981042
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4013981042.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_GETHOSTBYADDR_R_8    CMakeFiles/cmTryCompileExec4013981042.dir/CurlTests.c.o  -o cmTryCompileExec4013981042 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_GETHOSTBYADDR_R_8_REENTRANT passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec902652875/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec902652875.dir/build.make CMakeFiles/cmTryCompileExec902652875.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec902652875.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_GETHOSTBYADDR_R_8_REENTRANT   -o CMakeFiles/cmTryCompileExec902652875.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec902652875
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec902652875.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_GETHOSTBYADDR_R_8_REENTRANT    CMakeFiles/cmTryCompileExec902652875.dir/CurlTests.c.o  -o cmTryCompileExec902652875 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_GETHOSTBYNAME_R_6 passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3071852218/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3071852218.dir/build.make CMakeFiles/cmTryCompileExec3071852218.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3071852218.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_GETHOSTBYNAME_R_6   -o CMakeFiles/cmTryCompileExec3071852218.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec3071852218
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3071852218.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_GETHOSTBYNAME_R_6    CMakeFiles/cmTryCompileExec3071852218.dir/CurlTests.c.o  -o cmTryCompileExec3071852218 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_GETHOSTBYNAME_R_6_REENTRANT passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec900893882/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec900893882.dir/build.make CMakeFiles/cmTryCompileExec900893882.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec900893882.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_GETHOSTBYNAME_R_6_REENTRANT   -o CMakeFiles/cmTryCompileExec900893882.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec900893882
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec900893882.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_GETHOSTBYNAME_R_6_REENTRANT    CMakeFiles/cmTryCompileExec900893882.dir/CurlTests.c.o  -o cmTryCompileExec900893882 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_SOCKLEN_T passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1420174156/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1420174156.dir/build.make CMakeFiles/cmTryCompileExec1420174156.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1420174156.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_SOCKLEN_T   -o CMakeFiles/cmTryCompileExec1420174156.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec1420174156
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1420174156.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_SOCKLEN_T    CMakeFiles/cmTryCompileExec1420174156.dir/CurlTests.c.o  -o cmTryCompileExec1420174156 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_IN_ADDR_T passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec915532629/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec915532629.dir/build.make CMakeFiles/cmTryCompileExec915532629.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec915532629.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_IN_ADDR_T   -o CMakeFiles/cmTryCompileExec915532629.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec915532629
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec915532629.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_IN_ADDR_T    CMakeFiles/cmTryCompileExec915532629.dir/CurlTests.c.o  -o cmTryCompileExec915532629 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test STDC_HEADERS passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1213552713/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1213552713.dir/build.make CMakeFiles/cmTryCompileExec1213552713.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1213552713.dir/CurlTests.c.o
/usr/bin/gcc   -DSTDC_HEADERS   -o CMakeFiles/cmTryCompileExec1213552713.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec1213552713
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1213552713.dir/link.txt --verbose=1
/usr/bin/gcc      -DSTDC_HEADERS    CMakeFiles/cmTryCompileExec1213552713.dir/CurlTests.c.o  -o cmTryCompileExec1213552713 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test RETSIGTYPE_TEST passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec179874343/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec179874343.dir/build.make CMakeFiles/cmTryCompileExec179874343.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec179874343.dir/CurlTests.c.o
/usr/bin/gcc   -DRETSIGTYPE_TEST   -o CMakeFiles/cmTryCompileExec179874343.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec179874343
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec179874343.dir/link.txt --verbose=1
/usr/bin/gcc      -DRETSIGTYPE_TEST    CMakeFiles/cmTryCompileExec179874343.dir/CurlTests.c.o  -o cmTryCompileExec179874343 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_GETADDRINFO passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1662914187/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1662914187.dir/build.make CMakeFiles/cmTryCompileExec1662914187.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1662914187.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_GETADDRINFO   -o CMakeFiles/cmTryCompileExec1662914187.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c: In function 'main':
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c:405:5: warning: incompatible implicit declaration of built-in function 'memset' [enabled by default]
     memset(&hints, 0, sizeof(hints));
     ^
Linking C executable cmTryCompileExec1662914187
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1662914187.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_GETADDRINFO    CMakeFiles/cmTryCompileExec1662914187.dir/CurlTests.c.o  -o cmTryCompileExec1662914187 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Performing Curl Test HAVE_FILE_OFFSET_BITS passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1372821108/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1372821108.dir/build.make CMakeFiles/cmTryCompileExec1372821108.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1372821108.dir/CurlTests.c.o
/usr/bin/gcc   -DHAVE_FILE_OFFSET_BITS   -o CMakeFiles/cmTryCompileExec1372821108.dir/CurlTests.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmcurl/CMake/CurlTests.c
Linking C executable cmTryCompileExec1372821108
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1372821108.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_FILE_OFFSET_BITS    CMakeFiles/cmTryCompileExec1372821108.dir/CurlTests.c.o  -o cmTryCompileExec1372821108 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Determining size of curl_off_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3335961174/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3335961174.dir/build.make CMakeFiles/cmTryCompileExec3335961174.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3335961174.dir/SIZEOF_CURL_OFF_T.c.o
/usr/bin/gcc   -D_FILE_OFFSET_BITS=64   -o CMakeFiles/cmTryCompileExec3335961174.dir/SIZEOF_CURL_OFF_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_CURL_OFF_T.c
Linking C executable cmTryCompileExec3335961174
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3335961174.dir/link.txt --verbose=1
/usr/bin/gcc      -D_FILE_OFFSET_BITS=64    CMakeFiles/cmTryCompileExec3335961174.dir/SIZEOF_CURL_OFF_T.c.o  -o cmTryCompileExec3335961174 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C SOURCE FILE Test curl_cv_recv succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1877989518/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1877989518.dir/build.make CMakeFiles/cmTryCompileExec1877989518.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1877989518.dir/src.c.o
/usr/bin/gcc   -Dcurl_cv_recv   -o CMakeFiles/cmTryCompileExec1877989518.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec1877989518
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1877989518.dir/link.txt --verbose=1
/usr/bin/gcc      -Dcurl_cv_recv    CMakeFiles/cmTryCompileExec1877989518.dir/src.c.o  -o cmTryCompileExec1877989518 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/socket.h>

#define __unused5 1

int main() { recv(0, 0, 0, 0) ; return 0; }
Performing C SOURCE FILE Test int recv(int, void *, size_t, int) (curl_cv_func_recv_test) succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2825147216/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2825147216.dir/build.make CMakeFiles/cmTryCompileExec2825147216.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2825147216.dir/src.c.o
/usr/bin/gcc   -Dcurl_cv_func_recv_test   -o CMakeFiles/cmTryCompileExec2825147216.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec2825147216
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2825147216.dir/link.txt --verbose=1
/usr/bin/gcc      -Dcurl_cv_func_recv_test    CMakeFiles/cmTryCompileExec2825147216.dir/src.c.o  -o cmTryCompileExec2825147216 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/socket.h>
extern int  recv(int, void *, size_t, int);
#define __unused5 1

int main() { 
                    int s=0;
                    void * buf=0;
                    size_t len=0;
                    int flags=0;
                    int res = recv(s, buf, len, flags) ; return 0; }
Performing C SOURCE FILE Test curl_cv_send succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2728156377/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2728156377.dir/build.make CMakeFiles/cmTryCompileExec2728156377.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2728156377.dir/src.c.o
/usr/bin/gcc   -Dcurl_cv_send   -o CMakeFiles/cmTryCompileExec2728156377.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec2728156377
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2728156377.dir/link.txt --verbose=1
/usr/bin/gcc      -Dcurl_cv_send    CMakeFiles/cmTryCompileExec2728156377.dir/src.c.o  -o cmTryCompileExec2728156377 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/socket.h>
extern int  recv(int, void *, size_t, int);
#define __unused5 1

int main() { send(0, 0, 0, 0) ; return 0; }
Performing C SOURCE FILE Test int send(int, const void *, size_t, int) (curl_cv_func_send_test) succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2043836551/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2043836551.dir/build.make CMakeFiles/cmTryCompileExec2043836551.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2043836551.dir/src.c.o
/usr/bin/gcc   -Dcurl_cv_func_send_test   -o CMakeFiles/cmTryCompileExec2043836551.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec2043836551
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2043836551.dir/link.txt --verbose=1
/usr/bin/gcc      -Dcurl_cv_func_send_test    CMakeFiles/cmTryCompileExec2043836551.dir/src.c.o  -o cmTryCompileExec2043836551 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/socket.h>
extern int  send(int, const void *, size_t, int);
#define __unused5 1

int main() { 
                    int s=0;
                    const void * buf=0;
                    size_t len=0;
                    int flags=0;
                    int res = send(s, buf, len, flags) ; return 0; }
Performing C SOURCE FILE Test HAVE_MSG_NOSIGNAL succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1645516101/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1645516101.dir/build.make CMakeFiles/cmTryCompileExec1645516101.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1645516101.dir/src.c.o
/usr/bin/gcc   -DHAVE_MSG_NOSIGNAL   -o CMakeFiles/cmTryCompileExec1645516101.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c:12:0: warning: "__unused5" redefined [enabled by default]
 #define __unused5 1
 ^
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c:8:0: note: this is the location of the previous definition
 #define __unused5
 ^
Linking C executable cmTryCompileExec1645516101
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1645516101.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_MSG_NOSIGNAL    CMakeFiles/cmTryCompileExec1645516101.dir/src.c.o  -o cmTryCompileExec1645516101 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/socket.h>
extern int  send(int, const void *, size_t, int);
#define __unused5

#include <sys/types.h>
#include <sys/socket.h>
#define __unused5 1

int main() { int flag = MSG_NOSIGNAL ; return 0; }
Performing C SOURCE FILE Test HAVE_STRUCT_TIMEVAL succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1741482823/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1741482823.dir/build.make CMakeFiles/cmTryCompileExec1741482823.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1741482823.dir/src.c.o
/usr/bin/gcc   -DHAVE_STRUCT_TIMEVAL   -o CMakeFiles/cmTryCompileExec1741482823.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec1741482823
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1741482823.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_STRUCT_TIMEVAL    CMakeFiles/cmTryCompileExec1741482823.dir/src.c.o  -o cmTryCompileExec1741482823 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __unused1
#undef inline
#define __unused2

#include <sys/types.h>
#include <sys/time.h>
#include <time.h>
#include <time.h>
#define __unused5 1

int main() { struct timeval ts;
ts.tv_sec  = 0;
ts.tv_usec = 0 ; return 0; }
Determining size of sig_atomic_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4129627129/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4129627129.dir/build.make CMakeFiles/cmTryCompileExec4129627129.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4129627129.dir/SIZEOF_SIG_ATOMIC_T.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4129627129.dir/SIZEOF_SIG_ATOMIC_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_SIG_ATOMIC_T.c
Linking C executable cmTryCompileExec4129627129
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4129627129.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec4129627129.dir/SIZEOF_SIG_ATOMIC_T.c.o  -o cmTryCompileExec4129627129 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C SOURCE FILE Test HAVE_SIG_ATOMIC_T_NOT_VOLATILE succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2896347467/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2896347467.dir/build.make CMakeFiles/cmTryCompileExec2896347467.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2896347467.dir/src.c.o
/usr/bin/gcc   -DHAVE_SIG_ATOMIC_T_NOT_VOLATILE   -o CMakeFiles/cmTryCompileExec2896347467.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec2896347467
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2896347467.dir/link.txt --verbose=1
/usr/bin/gcc      -DHAVE_SIG_ATOMIC_T_NOT_VOLATILE    CMakeFiles/cmTryCompileExec2896347467.dir/src.c.o  -o cmTryCompileExec2896347467 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#include <signal.h>

int main() { static volatile sig_atomic_t dummy = 0 ; return 0; }
Determining size of struct sockaddr_storage passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2349960792/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2349960792.dir/build.make CMakeFiles/cmTryCompileExec2349960792.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2349960792.dir/SIZEOF_STRUCT_SOCKADDR_STORAGE.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec2349960792.dir/SIZEOF_STRUCT_SOCKADDR_STORAGE.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_STRUCT_SOCKADDR_STORAGE.c
Linking C executable cmTryCompileExec2349960792
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2349960792.dir/link.txt --verbose=1
/usr/bin/gcc          CMakeFiles/cmTryCompileExec2349960792.dir/SIZEOF_STRUCT_SOCKADDR_STORAGE.c.o  -o cmTryCompileExec2349960792 -rdynamic -ldl 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C SOURCE FILE Test HAVE_DIRENT_H succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec583639575/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec583639575.dir/build.make CMakeFiles/cmTryCompileExec583639575.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec583639575.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_DIRENT_H   -o CMakeFiles/cmTryCompileExec583639575.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec583639575
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec583639575.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_DIRENT_H    CMakeFiles/cmTryCompileExec583639575.dir/src.c.o  -o cmTryCompileExec583639575 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#include <dirent.h>

int main()
{
   static DIR * tmp;
   if (sizeof(tmp))
      return 0;
  return 0;
}

Determining if files sys/types.h;ctype.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec300851663/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec300851663.dir/build.make CMakeFiles/cmTryCompileExec300851663.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec300851663.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec300851663.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec300851663
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec300851663.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec300851663.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec300851663 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1530936229/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1530936229.dir/build.make CMakeFiles/cmTryCompileExec1530936229.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1530936229.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1530936229.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1530936229
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1530936229.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1530936229.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1530936229 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3870746228/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3870746228.dir/build.make CMakeFiles/cmTryCompileExec3870746228.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3870746228.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3870746228.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3870746228
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3870746228.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3870746228.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3870746228 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec478544679/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec478544679.dir/build.make CMakeFiles/cmTryCompileExec478544679.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec478544679.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec478544679.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec478544679
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec478544679.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec478544679.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec478544679 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1550127312/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1550127312.dir/build.make CMakeFiles/cmTryCompileExec1550127312.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1550127312.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1550127312.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1550127312
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1550127312.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1550127312.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1550127312 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec151529563/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec151529563.dir/build.make CMakeFiles/cmTryCompileExec151529563.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec151529563.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec151529563.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec151529563
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec151529563.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec151529563.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec151529563 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1798618269/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1798618269.dir/build.make CMakeFiles/cmTryCompileExec1798618269.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1798618269.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1798618269.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1798618269
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1798618269.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1798618269.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1798618269 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2256696548/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2256696548.dir/build.make CMakeFiles/cmTryCompileExec2256696548.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2256696548.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2256696548.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2256696548
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2256696548.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2256696548.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2256696548 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1264716270/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1264716270.dir/build.make CMakeFiles/cmTryCompileExec1264716270.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1264716270.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1264716270.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1264716270
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1264716270.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1264716270.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1264716270 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3783011269/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3783011269.dir/build.make CMakeFiles/cmTryCompileExec3783011269.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3783011269.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3783011269.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3783011269
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3783011269.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3783011269.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3783011269 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3175649454/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3175649454.dir/build.make CMakeFiles/cmTryCompileExec3175649454.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3175649454.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3175649454.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3175649454
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3175649454.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3175649454.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3175649454 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3217481175/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3217481175.dir/build.make CMakeFiles/cmTryCompileExec3217481175.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3217481175.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3217481175.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec3217481175
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3217481175.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3217481175.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec3217481175 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1911618026/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1911618026.dir/build.make CMakeFiles/cmTryCompileExec1911618026.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1911618026.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1911618026.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1911618026
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1911618026.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1911618026.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1911618026 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h;sys/statvfs.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1147965754/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1147965754.dir/build.make CMakeFiles/cmTryCompileExec1147965754.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1147965754.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1147965754.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec1147965754
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1147965754.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1147965754.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec1147965754 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h;sys/statvfs.h;sys/time.h;sys/utsname.h;sys/vfs.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2700769441/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2700769441.dir/build.make CMakeFiles/cmTryCompileExec2700769441.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2700769441.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2700769441.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec2700769441
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2700769441.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2700769441.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec2700769441 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h;sys/statvfs.h;sys/time.h;sys/utsname.h;sys/vfs.h;sys/wait.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec837896922/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec837896922.dir/build.make CMakeFiles/cmTryCompileExec837896922.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec837896922.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec837896922.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec837896922
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec837896922.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec837896922.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec837896922 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h;sys/statvfs.h;sys/time.h;sys/utsname.h;sys/vfs.h;sys/wait.h;time.h;unistd.h;utime.h;wchar.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec56887122/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec56887122.dir/build.make CMakeFiles/cmTryCompileExec56887122.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec56887122.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec56887122.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec56887122
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec56887122.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec56887122.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec56887122 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if files sys/types.h;ctype.h;dlfcn.h;errno.h;fcntl.h;grp.h;inttypes.h;langinfo.h;limits.h;linux/types.h;linux/fiemap.h;linux/fs.h;linux/magic.h;locale.h;memory.h;paths.h;poll.h;pwd.h;regex.h;signal.h;stdarg.h;stdint.h;stdlib.h;string.h;strings.h;sys/cdefs.h;sys/ioctl.h;sys/param.h;sys/poll.h;sys/select.h;sys/stat.h;sys/statfs.h;sys/statvfs.h;sys/time.h;sys/utsname.h;sys/vfs.h;sys/wait.h;time.h;unistd.h;utime.h;wchar.h;wctype.h exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec224759557/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec224759557.dir/build.make CMakeFiles/cmTryCompileExec224759557.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec224759557.dir/CheckIncludeFiles.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec224759557.dir/CheckIncludeFiles.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFiles.c
Linking C executable cmTryCompileExec224759557
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec224759557.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec224759557.dir/CheckIncludeFiles.c.o  -o cmTryCompileExec224759557 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C SOURCE FILE Test SAFE_TO_DEFINE_EXTENSIONS succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4180787832/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4180787832.dir/build.make CMakeFiles/cmTryCompileExec4180787832.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4180787832.dir/src.c.o
/usr/bin/gcc   -w  -DSAFE_TO_DEFINE_EXTENSIONS   -o CMakeFiles/cmTryCompileExec4180787832.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec4180787832
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4180787832.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DSAFE_TO_DEFINE_EXTENSIONS    CMakeFiles/cmTryCompileExec4180787832.dir/src.c.o  -o cmTryCompileExec4180787832 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#define __EXTENSIONS__ 1
   
   int main() { return 0;}
Determining if the function chown exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec13455483/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec13455483.dir/build.make CMakeFiles/cmTryCompileExec13455483.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec13455483.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=chown  -fno-builtin   -o CMakeFiles/cmTryCompileExec13455483.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec13455483
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec13455483.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=chown  -fno-builtin    CMakeFiles/cmTryCompileExec13455483.dir/CheckFunctionExists.c.o  -o cmTryCompileExec13455483 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function chroot exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1212148704/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1212148704.dir/build.make CMakeFiles/cmTryCompileExec1212148704.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1212148704.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=chroot  -fno-builtin   -o CMakeFiles/cmTryCompileExec1212148704.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1212148704
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1212148704.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=chroot  -fno-builtin    CMakeFiles/cmTryCompileExec1212148704.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1212148704 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function ctime_r exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3805946430/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3805946430.dir/build.make CMakeFiles/cmTryCompileExec3805946430.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3805946430.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=ctime_r  -fno-builtin   -o CMakeFiles/cmTryCompileExec3805946430.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3805946430
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3805946430.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=ctime_r  -fno-builtin    CMakeFiles/cmTryCompileExec3805946430.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3805946430 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fchdir exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3341704462/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3341704462.dir/build.make CMakeFiles/cmTryCompileExec3341704462.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3341704462.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fchdir  -fno-builtin   -o CMakeFiles/cmTryCompileExec3341704462.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3341704462
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3341704462.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fchdir  -fno-builtin    CMakeFiles/cmTryCompileExec3341704462.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3341704462 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fchmod exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2329123402/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2329123402.dir/build.make CMakeFiles/cmTryCompileExec2329123402.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2329123402.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fchmod  -fno-builtin   -o CMakeFiles/cmTryCompileExec2329123402.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2329123402
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2329123402.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fchmod  -fno-builtin    CMakeFiles/cmTryCompileExec2329123402.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2329123402 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fchown exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec183461476/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec183461476.dir/build.make CMakeFiles/cmTryCompileExec183461476.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec183461476.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fchown  -fno-builtin   -o CMakeFiles/cmTryCompileExec183461476.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec183461476
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec183461476.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fchown  -fno-builtin    CMakeFiles/cmTryCompileExec183461476.dir/CheckFunctionExists.c.o  -o cmTryCompileExec183461476 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fcntl exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2085211083/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2085211083.dir/build.make CMakeFiles/cmTryCompileExec2085211083.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2085211083.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fcntl  -fno-builtin   -o CMakeFiles/cmTryCompileExec2085211083.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2085211083
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2085211083.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fcntl  -fno-builtin    CMakeFiles/cmTryCompileExec2085211083.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2085211083 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fdopendir exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2065705818/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2065705818.dir/build.make CMakeFiles/cmTryCompileExec2065705818.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2065705818.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fdopendir  -fno-builtin   -o CMakeFiles/cmTryCompileExec2065705818.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2065705818
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2065705818.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fdopendir  -fno-builtin    CMakeFiles/cmTryCompileExec2065705818.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2065705818 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fstat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1292929195/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1292929195.dir/build.make CMakeFiles/cmTryCompileExec1292929195.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1292929195.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fstat  -fno-builtin   -o CMakeFiles/cmTryCompileExec1292929195.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1292929195
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1292929195.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fstat  -fno-builtin    CMakeFiles/cmTryCompileExec1292929195.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1292929195 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fstatat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2973710128/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2973710128.dir/build.make CMakeFiles/cmTryCompileExec2973710128.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2973710128.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fstatat  -fno-builtin   -o CMakeFiles/cmTryCompileExec2973710128.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2973710128
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2973710128.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fstatat  -fno-builtin    CMakeFiles/cmTryCompileExec2973710128.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2973710128 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fstatfs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2408135857/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2408135857.dir/build.make CMakeFiles/cmTryCompileExec2408135857.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2408135857.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fstatfs  -fno-builtin   -o CMakeFiles/cmTryCompileExec2408135857.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2408135857
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2408135857.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fstatfs  -fno-builtin    CMakeFiles/cmTryCompileExec2408135857.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2408135857 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fstatvfs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec216040303/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec216040303.dir/build.make CMakeFiles/cmTryCompileExec216040303.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec216040303.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fstatvfs  -fno-builtin   -o CMakeFiles/cmTryCompileExec216040303.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec216040303
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec216040303.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fstatvfs  -fno-builtin    CMakeFiles/cmTryCompileExec216040303.dir/CheckFunctionExists.c.o  -o cmTryCompileExec216040303 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function futimens exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec209206745/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec209206745.dir/build.make CMakeFiles/cmTryCompileExec209206745.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec209206745.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=futimens  -fno-builtin   -o CMakeFiles/cmTryCompileExec209206745.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec209206745
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec209206745.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=futimens  -fno-builtin    CMakeFiles/cmTryCompileExec209206745.dir/CheckFunctionExists.c.o  -o cmTryCompileExec209206745 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function futimes exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3367417348/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3367417348.dir/build.make CMakeFiles/cmTryCompileExec3367417348.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3367417348.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=futimes  -fno-builtin   -o CMakeFiles/cmTryCompileExec3367417348.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3367417348
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3367417348.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=futimes  -fno-builtin    CMakeFiles/cmTryCompileExec3367417348.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3367417348 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function futimesat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1460477058/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1460477058.dir/build.make CMakeFiles/cmTryCompileExec1460477058.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1460477058.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=futimesat  -fno-builtin   -o CMakeFiles/cmTryCompileExec1460477058.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1460477058
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1460477058.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=futimesat  -fno-builtin    CMakeFiles/cmTryCompileExec1460477058.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1460477058 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function getgrgid_r exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec572670059/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec572670059.dir/build.make CMakeFiles/cmTryCompileExec572670059.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec572670059.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=getgrgid_r  -fno-builtin   -o CMakeFiles/cmTryCompileExec572670059.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec572670059
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec572670059.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=getgrgid_r  -fno-builtin    CMakeFiles/cmTryCompileExec572670059.dir/CheckFunctionExists.c.o  -o cmTryCompileExec572670059 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function getgrnam_r exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3078155941/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3078155941.dir/build.make CMakeFiles/cmTryCompileExec3078155941.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3078155941.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=getgrnam_r  -fno-builtin   -o CMakeFiles/cmTryCompileExec3078155941.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3078155941
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3078155941.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=getgrnam_r  -fno-builtin    CMakeFiles/cmTryCompileExec3078155941.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3078155941 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function getpwnam_r exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1050724744/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1050724744.dir/build.make CMakeFiles/cmTryCompileExec1050724744.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1050724744.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=getpwnam_r  -fno-builtin   -o CMakeFiles/cmTryCompileExec1050724744.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1050724744
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1050724744.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=getpwnam_r  -fno-builtin    CMakeFiles/cmTryCompileExec1050724744.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1050724744 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function getpwuid_r exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec900297839/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec900297839.dir/build.make CMakeFiles/cmTryCompileExec900297839.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec900297839.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=getpwuid_r  -fno-builtin   -o CMakeFiles/cmTryCompileExec900297839.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec900297839
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec900297839.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=getpwuid_r  -fno-builtin    CMakeFiles/cmTryCompileExec900297839.dir/CheckFunctionExists.c.o  -o cmTryCompileExec900297839 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function getpid exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2432355586/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2432355586.dir/build.make CMakeFiles/cmTryCompileExec2432355586.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2432355586.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=getpid  -fno-builtin   -o CMakeFiles/cmTryCompileExec2432355586.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2432355586
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2432355586.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=getpid  -fno-builtin    CMakeFiles/cmTryCompileExec2432355586.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2432355586 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function lchown exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3429745298/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3429745298.dir/build.make CMakeFiles/cmTryCompileExec3429745298.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3429745298.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=lchown  -fno-builtin   -o CMakeFiles/cmTryCompileExec3429745298.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3429745298
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3429745298.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=lchown  -fno-builtin    CMakeFiles/cmTryCompileExec3429745298.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3429745298 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function link exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1510678383/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1510678383.dir/build.make CMakeFiles/cmTryCompileExec1510678383.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1510678383.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=link  -fno-builtin   -o CMakeFiles/cmTryCompileExec1510678383.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1510678383
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1510678383.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=link  -fno-builtin    CMakeFiles/cmTryCompileExec1510678383.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1510678383 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function lstat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec858449907/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec858449907.dir/build.make CMakeFiles/cmTryCompileExec858449907.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec858449907.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=lstat  -fno-builtin   -o CMakeFiles/cmTryCompileExec858449907.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec858449907
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec858449907.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=lstat  -fno-builtin    CMakeFiles/cmTryCompileExec858449907.dir/CheckFunctionExists.c.o  -o cmTryCompileExec858449907 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function lutimes exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2290797026/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2290797026.dir/build.make CMakeFiles/cmTryCompileExec2290797026.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2290797026.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=lutimes  -fno-builtin   -o CMakeFiles/cmTryCompileExec2290797026.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2290797026
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2290797026.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=lutimes  -fno-builtin    CMakeFiles/cmTryCompileExec2290797026.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2290797026 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mbrtowc exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec931205156/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec931205156.dir/build.make CMakeFiles/cmTryCompileExec931205156.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec931205156.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mbrtowc  -fno-builtin   -o CMakeFiles/cmTryCompileExec931205156.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec931205156
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec931205156.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mbrtowc  -fno-builtin    CMakeFiles/cmTryCompileExec931205156.dir/CheckFunctionExists.c.o  -o cmTryCompileExec931205156 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mbsnrtowcs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec951930457/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec951930457.dir/build.make CMakeFiles/cmTryCompileExec951930457.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec951930457.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mbsnrtowcs  -fno-builtin   -o CMakeFiles/cmTryCompileExec951930457.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec951930457
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec951930457.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mbsnrtowcs  -fno-builtin    CMakeFiles/cmTryCompileExec951930457.dir/CheckFunctionExists.c.o  -o cmTryCompileExec951930457 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function memmove exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3197804465/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3197804465.dir/build.make CMakeFiles/cmTryCompileExec3197804465.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3197804465.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=memmove  -fno-builtin   -o CMakeFiles/cmTryCompileExec3197804465.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3197804465
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3197804465.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=memmove  -fno-builtin    CMakeFiles/cmTryCompileExec3197804465.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3197804465 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mkdir exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec130309072/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec130309072.dir/build.make CMakeFiles/cmTryCompileExec130309072.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec130309072.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mkdir  -fno-builtin   -o CMakeFiles/cmTryCompileExec130309072.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec130309072
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec130309072.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mkdir  -fno-builtin    CMakeFiles/cmTryCompileExec130309072.dir/CheckFunctionExists.c.o  -o cmTryCompileExec130309072 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mkfifo exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3403983839/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3403983839.dir/build.make CMakeFiles/cmTryCompileExec3403983839.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3403983839.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mkfifo  -fno-builtin   -o CMakeFiles/cmTryCompileExec3403983839.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3403983839
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3403983839.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mkfifo  -fno-builtin    CMakeFiles/cmTryCompileExec3403983839.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3403983839 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mknod exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec99860870/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec99860870.dir/build.make CMakeFiles/cmTryCompileExec99860870.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec99860870.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mknod  -fno-builtin   -o CMakeFiles/cmTryCompileExec99860870.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec99860870
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec99860870.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mknod  -fno-builtin    CMakeFiles/cmTryCompileExec99860870.dir/CheckFunctionExists.c.o  -o cmTryCompileExec99860870 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function mkstemp exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3654840392/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3654840392.dir/build.make CMakeFiles/cmTryCompileExec3654840392.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3654840392.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=mkstemp  -fno-builtin   -o CMakeFiles/cmTryCompileExec3654840392.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3654840392
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3654840392.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=mkstemp  -fno-builtin    CMakeFiles/cmTryCompileExec3654840392.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3654840392 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function nl_langinfo exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec515412917/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec515412917.dir/build.make CMakeFiles/cmTryCompileExec515412917.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec515412917.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=nl_langinfo  -fno-builtin   -o CMakeFiles/cmTryCompileExec515412917.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec515412917
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec515412917.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=nl_langinfo  -fno-builtin    CMakeFiles/cmTryCompileExec515412917.dir/CheckFunctionExists.c.o  -o cmTryCompileExec515412917 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function openat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2720326855/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2720326855.dir/build.make CMakeFiles/cmTryCompileExec2720326855.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2720326855.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=openat  -fno-builtin   -o CMakeFiles/cmTryCompileExec2720326855.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2720326855
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2720326855.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=openat  -fno-builtin    CMakeFiles/cmTryCompileExec2720326855.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2720326855 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function readlink exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec459355091/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec459355091.dir/build.make CMakeFiles/cmTryCompileExec459355091.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec459355091.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=readlink  -fno-builtin   -o CMakeFiles/cmTryCompileExec459355091.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec459355091
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec459355091.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=readlink  -fno-builtin    CMakeFiles/cmTryCompileExec459355091.dir/CheckFunctionExists.c.o  -o cmTryCompileExec459355091 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function setenv exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec576042577/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec576042577.dir/build.make CMakeFiles/cmTryCompileExec576042577.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec576042577.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=setenv  -fno-builtin   -o CMakeFiles/cmTryCompileExec576042577.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec576042577
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec576042577.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=setenv  -fno-builtin    CMakeFiles/cmTryCompileExec576042577.dir/CheckFunctionExists.c.o  -o cmTryCompileExec576042577 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function statfs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3528525845/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3528525845.dir/build.make CMakeFiles/cmTryCompileExec3528525845.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3528525845.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=statfs  -fno-builtin   -o CMakeFiles/cmTryCompileExec3528525845.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3528525845
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3528525845.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=statfs  -fno-builtin    CMakeFiles/cmTryCompileExec3528525845.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3528525845 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function statvfs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2429590387/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2429590387.dir/build.make CMakeFiles/cmTryCompileExec2429590387.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2429590387.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=statvfs  -fno-builtin   -o CMakeFiles/cmTryCompileExec2429590387.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2429590387
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2429590387.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=statvfs  -fno-builtin    CMakeFiles/cmTryCompileExec2429590387.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2429590387 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function strchr exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1610082657/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1610082657.dir/build.make CMakeFiles/cmTryCompileExec1610082657.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1610082657.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=strchr  -fno-builtin   -o CMakeFiles/cmTryCompileExec1610082657.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1610082657
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1610082657.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=strchr  -fno-builtin    CMakeFiles/cmTryCompileExec1610082657.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1610082657 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function strerror exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3677373882/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3677373882.dir/build.make CMakeFiles/cmTryCompileExec3677373882.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3677373882.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=strerror  -fno-builtin   -o CMakeFiles/cmTryCompileExec3677373882.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3677373882
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3677373882.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=strerror  -fno-builtin    CMakeFiles/cmTryCompileExec3677373882.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3677373882 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function strrchr exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2671588963/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2671588963.dir/build.make CMakeFiles/cmTryCompileExec2671588963.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2671588963.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=strrchr  -fno-builtin   -o CMakeFiles/cmTryCompileExec2671588963.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2671588963
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2671588963.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=strrchr  -fno-builtin    CMakeFiles/cmTryCompileExec2671588963.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2671588963 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function symlink exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3760551347/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3760551347.dir/build.make CMakeFiles/cmTryCompileExec3760551347.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3760551347.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=symlink  -fno-builtin   -o CMakeFiles/cmTryCompileExec3760551347.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3760551347
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3760551347.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=symlink  -fno-builtin    CMakeFiles/cmTryCompileExec3760551347.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3760551347 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function timegm exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3882003845/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3882003845.dir/build.make CMakeFiles/cmTryCompileExec3882003845.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3882003845.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=timegm  -fno-builtin   -o CMakeFiles/cmTryCompileExec3882003845.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3882003845
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3882003845.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=timegm  -fno-builtin    CMakeFiles/cmTryCompileExec3882003845.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3882003845 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function tzset exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec342750051/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec342750051.dir/build.make CMakeFiles/cmTryCompileExec342750051.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec342750051.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=tzset  -fno-builtin   -o CMakeFiles/cmTryCompileExec342750051.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec342750051
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec342750051.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=tzset  -fno-builtin    CMakeFiles/cmTryCompileExec342750051.dir/CheckFunctionExists.c.o  -o cmTryCompileExec342750051 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function utimes exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2161881346/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2161881346.dir/build.make CMakeFiles/cmTryCompileExec2161881346.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2161881346.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=utimes  -fno-builtin   -o CMakeFiles/cmTryCompileExec2161881346.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2161881346
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2161881346.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=utimes  -fno-builtin    CMakeFiles/cmTryCompileExec2161881346.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2161881346 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function utimensat exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2325345282/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2325345282.dir/build.make CMakeFiles/cmTryCompileExec2325345282.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2325345282.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=utimensat  -fno-builtin   -o CMakeFiles/cmTryCompileExec2325345282.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2325345282
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2325345282.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=utimensat  -fno-builtin    CMakeFiles/cmTryCompileExec2325345282.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2325345282 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function vfork exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3454758749/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3454758749.dir/build.make CMakeFiles/cmTryCompileExec3454758749.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3454758749.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=vfork  -fno-builtin   -o CMakeFiles/cmTryCompileExec3454758749.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3454758749
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3454758749.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=vfork  -fno-builtin    CMakeFiles/cmTryCompileExec3454758749.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3454758749 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wcrtomb exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3657764135/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3657764135.dir/build.make CMakeFiles/cmTryCompileExec3657764135.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3657764135.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wcrtomb  -fno-builtin   -o CMakeFiles/cmTryCompileExec3657764135.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec3657764135
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3657764135.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wcrtomb  -fno-builtin    CMakeFiles/cmTryCompileExec3657764135.dir/CheckFunctionExists.c.o  -o cmTryCompileExec3657764135 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wcscmp exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2036166114/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2036166114.dir/build.make CMakeFiles/cmTryCompileExec2036166114.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2036166114.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wcscmp  -fno-builtin   -o CMakeFiles/cmTryCompileExec2036166114.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2036166114
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2036166114.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wcscmp  -fno-builtin    CMakeFiles/cmTryCompileExec2036166114.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2036166114 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wcscpy exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2369701947/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2369701947.dir/build.make CMakeFiles/cmTryCompileExec2369701947.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2369701947.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wcscpy  -fno-builtin   -o CMakeFiles/cmTryCompileExec2369701947.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2369701947
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2369701947.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wcscpy  -fno-builtin    CMakeFiles/cmTryCompileExec2369701947.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2369701947 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wcslen exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1438426541/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1438426541.dir/build.make CMakeFiles/cmTryCompileExec1438426541.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1438426541.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wcslen  -fno-builtin   -o CMakeFiles/cmTryCompileExec1438426541.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec1438426541
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1438426541.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wcslen  -fno-builtin    CMakeFiles/cmTryCompileExec1438426541.dir/CheckFunctionExists.c.o  -o cmTryCompileExec1438426541 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wcsnrtombs exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec318230062/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec318230062.dir/build.make CMakeFiles/cmTryCompileExec318230062.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec318230062.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wcsnrtombs  -fno-builtin   -o CMakeFiles/cmTryCompileExec318230062.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec318230062
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec318230062.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wcsnrtombs  -fno-builtin    CMakeFiles/cmTryCompileExec318230062.dir/CheckFunctionExists.c.o  -o cmTryCompileExec318230062 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wctomb exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2262958907/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2262958907.dir/build.make CMakeFiles/cmTryCompileExec2262958907.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2262958907.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wctomb  -fno-builtin   -o CMakeFiles/cmTryCompileExec2262958907.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2262958907
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2262958907.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wctomb  -fno-builtin    CMakeFiles/cmTryCompileExec2262958907.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2262958907 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function fseeko exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2854616424/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2854616424.dir/build.make CMakeFiles/cmTryCompileExec2854616424.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2854616424.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=fseeko  -fno-builtin   -o CMakeFiles/cmTryCompileExec2854616424.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2854616424
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2854616424.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=fseeko  -fno-builtin    CMakeFiles/cmTryCompileExec2854616424.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2854616424 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function vprintf exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4221637840/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4221637840.dir/build.make CMakeFiles/cmTryCompileExec4221637840.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4221637840.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=vprintf  -fno-builtin   -o CMakeFiles/cmTryCompileExec4221637840.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec4221637840
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4221637840.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=vprintf  -fno-builtin    CMakeFiles/cmTryCompileExec4221637840.dir/CheckFunctionExists.c.o  -o cmTryCompileExec4221637840 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wmemcmp exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4153290225/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4153290225.dir/build.make CMakeFiles/cmTryCompileExec4153290225.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4153290225.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wmemcmp  -fno-builtin   -o CMakeFiles/cmTryCompileExec4153290225.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec4153290225
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4153290225.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wmemcmp  -fno-builtin    CMakeFiles/cmTryCompileExec4153290225.dir/CheckFunctionExists.c.o  -o cmTryCompileExec4153290225 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the function wmemcpy exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2669724415/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2669724415.dir/build.make CMakeFiles/cmTryCompileExec2669724415.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2669724415.dir/CheckFunctionExists.c.o
/usr/bin/gcc   -w  -DCHECK_FUNCTION_EXISTS=wmemcpy  -fno-builtin   -o CMakeFiles/cmTryCompileExec2669724415.dir/CheckFunctionExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Modules/CheckFunctionExists.c
Linking C executable cmTryCompileExec2669724415
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2669724415.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DCHECK_FUNCTION_EXISTS=wmemcpy  -fno-builtin    CMakeFiles/cmTryCompileExec2669724415.dir/CheckFunctionExists.c.o  -o cmTryCompileExec2669724415 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C SOURCE FILE Test HAVE_READDIR_R succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1560975636/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1560975636.dir/build.make CMakeFiles/cmTryCompileExec1560975636.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1560975636.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_READDIR_R   -o CMakeFiles/cmTryCompileExec1560975636.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec1560975636
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1560975636.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_READDIR_R    CMakeFiles/cmTryCompileExec1560975636.dir/src.c.o  -o cmTryCompileExec1560975636 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#include <dirent.h>
int main() {DIR *d = opendir("."); struct dirent e,*r; return readdir_r(d,&e,&r);}
Performing C SOURCE FILE Test HAVE_READLINKAT succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2705181288/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2705181288.dir/build.make CMakeFiles/cmTryCompileExec2705181288.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2705181288.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_READLINKAT   -o CMakeFiles/cmTryCompileExec2705181288.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec2705181288
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2705181288.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_READLINKAT    CMakeFiles/cmTryCompileExec2705181288.dir/src.c.o  -o cmTryCompileExec2705181288 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#include <fcntl.h>
#include <unistd.h>
int main() {char buf[10]; return readlinkat(AT_FDCWD, "", buf, 0);}
Performing C SOURCE FILE Test MAJOR_IN_SYSMACROS succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec943377789/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec943377789.dir/build.make CMakeFiles/cmTryCompileExec943377789.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec943377789.dir/src.c.o
/usr/bin/gcc   -w  -DMAJOR_IN_SYSMACROS   -o CMakeFiles/cmTryCompileExec943377789.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec943377789
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec943377789.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DMAJOR_IN_SYSMACROS    CMakeFiles/cmTryCompileExec943377789.dir/src.c.o  -o cmTryCompileExec943377789 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
#include <sys/sysmacros.h>
int main() { return major(256); }
Determining if the EILSEQ exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2930214086/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2930214086.dir/build.make CMakeFiles/cmTryCompileExec2930214086.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2930214086.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2930214086.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2930214086
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2930214086.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2930214086.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2930214086 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <errno.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef EILSEQ
  return ((int*)(&EILSEQ))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the INT64_MAX exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec402236080/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec402236080.dir/build.make CMakeFiles/cmTryCompileExec402236080.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec402236080.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec402236080.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec402236080
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec402236080.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec402236080.dir/CheckSymbolExists.c.o  -o cmTryCompileExec402236080 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef INT64_MAX
  return ((int*)(&INT64_MAX))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the INT64_MIN exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3951020096/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3951020096.dir/build.make CMakeFiles/cmTryCompileExec3951020096.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3951020096.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3951020096.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3951020096
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3951020096.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3951020096.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3951020096 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef INT64_MIN
  return ((int*)(&INT64_MIN))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the UINT32_MAX exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1986241394/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1986241394.dir/build.make CMakeFiles/cmTryCompileExec1986241394.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1986241394.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1986241394.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec1986241394
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1986241394.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1986241394.dir/CheckSymbolExists.c.o  -o cmTryCompileExec1986241394 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef UINT32_MAX
  return ((int*)(&UINT32_MAX))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the UINT64_MAX exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3942678371/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3942678371.dir/build.make CMakeFiles/cmTryCompileExec3942678371.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3942678371.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3942678371.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3942678371
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3942678371.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3942678371.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3942678371 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef UINT64_MAX
  return ((int*)(&UINT64_MAX))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the SIZE_MAX exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2702480456/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2702480456.dir/build.make CMakeFiles/cmTryCompileExec2702480456.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2702480456.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2702480456.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec2702480456
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2702480456.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2702480456.dir/CheckSymbolExists.c.o  -o cmTryCompileExec2702480456 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>
#include <stdint.h>
#include <inttypes.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef SIZE_MAX
  return ((int*)(&SIZE_MAX))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Determining if the SSIZE_MAX exist passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3006239557/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3006239557.dir/build.make CMakeFiles/cmTryCompileExec3006239557.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3006239557.dir/CheckSymbolExists.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3006239557.dir/CheckSymbolExists.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c
Linking C executable cmTryCompileExec3006239557
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3006239557.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3006239557.dir/CheckSymbolExists.c.o  -o cmTryCompileExec3006239557 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

File /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <limits.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef SSIZE_MAX
  return ((int*)(&SSIZE_MAX))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Performing C SOURCE FILE Test HAVE_STRUCT_TM_TM_GMTOFF succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3953093307/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3953093307.dir/build.make CMakeFiles/cmTryCompileExec3953093307.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3953093307.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_STRUCT_TM_TM_GMTOFF   -o CMakeFiles/cmTryCompileExec3953093307.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec3953093307
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3953093307.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_STRUCT_TM_TM_GMTOFF    CMakeFiles/cmTryCompileExec3953093307.dir/src.c.o  -o cmTryCompileExec3953093307 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#include <time.h>

int main()
{
   static struct tm tmp;
   if (sizeof(tmp.tm_gmtoff))
      return 0;
  return 0;
}

Performing C SOURCE FILE Test HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec394348121/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec394348121.dir/build.make CMakeFiles/cmTryCompileExec394348121.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec394348121.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_STRUCT_STAT_ST_MTIM_TV_NSEC   -o CMakeFiles/cmTryCompileExec394348121.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec394348121
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec394348121.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_STRUCT_STAT_ST_MTIM_TV_NSEC    CMakeFiles/cmTryCompileExec394348121.dir/src.c.o  -o cmTryCompileExec394348121 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#include <sys/types.h>
#include <sys/stat.h>

int main()
{
   static struct stat tmp;
   if (sizeof(tmp.st_mtim.tv_nsec))
      return 0;
  return 0;
}

Performing C SOURCE FILE Test HAVE_STRUCT_STAT_ST_BLKSIZE succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec200269294/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec200269294.dir/build.make CMakeFiles/cmTryCompileExec200269294.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec200269294.dir/src.c.o
/usr/bin/gcc   -w  -DHAVE_STRUCT_STAT_ST_BLKSIZE   -o CMakeFiles/cmTryCompileExec200269294.dir/src.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTryCompileExec200269294
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec200269294.dir/link.txt --verbose=1
/usr/bin/gcc    -w  -DHAVE_STRUCT_STAT_ST_BLKSIZE    CMakeFiles/cmTryCompileExec200269294.dir/src.c.o  -o cmTryCompileExec200269294 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#include <sys/types.h>
#include <sys/stat.h>

int main()
{
   static struct stat tmp;
   if (sizeof(tmp.st_blksize))
      return 0;
  return 0;
}

Determining size of short passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3244885266/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3244885266.dir/build.make CMakeFiles/cmTryCompileExec3244885266.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3244885266.dir/SIZE_OF_SHORT.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3244885266.dir/SIZE_OF_SHORT.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_SHORT.c
Linking C executable cmTryCompileExec3244885266
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3244885266.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3244885266.dir/SIZE_OF_SHORT.c.o  -o cmTryCompileExec3244885266 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of int passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3954093872/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3954093872.dir/build.make CMakeFiles/cmTryCompileExec3954093872.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3954093872.dir/SIZE_OF_INT.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3954093872.dir/SIZE_OF_INT.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_INT.c
Linking C executable cmTryCompileExec3954093872
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3954093872.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3954093872.dir/SIZE_OF_INT.c.o  -o cmTryCompileExec3954093872 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1843009262/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1843009262.dir/build.make CMakeFiles/cmTryCompileExec1843009262.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1843009262.dir/SIZE_OF_LONG.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1843009262.dir/SIZE_OF_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_LONG.c
Linking C executable cmTryCompileExec1843009262
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1843009262.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1843009262.dir/SIZE_OF_LONG.c.o  -o cmTryCompileExec1843009262 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of long long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2001581016/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2001581016.dir/build.make CMakeFiles/cmTryCompileExec2001581016.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2001581016.dir/SIZE_OF_LONG_LONG.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2001581016.dir/SIZE_OF_LONG_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_LONG_LONG.c
Linking C executable cmTryCompileExec2001581016
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2001581016.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2001581016.dir/SIZE_OF_LONG_LONG.c.o  -o cmTryCompileExec2001581016 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of unsigned short passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3721164904/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3721164904.dir/build.make CMakeFiles/cmTryCompileExec3721164904.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3721164904.dir/SIZE_OF_UNSIGNED_SHORT.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3721164904.dir/SIZE_OF_UNSIGNED_SHORT.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_UNSIGNED_SHORT.c
Linking C executable cmTryCompileExec3721164904
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3721164904.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3721164904.dir/SIZE_OF_UNSIGNED_SHORT.c.o  -o cmTryCompileExec3721164904 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of unsigned passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec436760542/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec436760542.dir/build.make CMakeFiles/cmTryCompileExec436760542.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec436760542.dir/SIZE_OF_UNSIGNED.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec436760542.dir/SIZE_OF_UNSIGNED.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_UNSIGNED.c
Linking C executable cmTryCompileExec436760542
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec436760542.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec436760542.dir/SIZE_OF_UNSIGNED.c.o  -o cmTryCompileExec436760542 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of unsigned long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2782015125/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2782015125.dir/build.make CMakeFiles/cmTryCompileExec2782015125.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2782015125.dir/SIZE_OF_UNSIGNED_LONG.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2782015125.dir/SIZE_OF_UNSIGNED_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_UNSIGNED_LONG.c
Linking C executable cmTryCompileExec2782015125
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2782015125.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2782015125.dir/SIZE_OF_UNSIGNED_LONG.c.o  -o cmTryCompileExec2782015125 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of unsigned long long passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec129428417/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec129428417.dir/build.make CMakeFiles/cmTryCompileExec129428417.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec129428417.dir/SIZE_OF_UNSIGNED_LONG_LONG.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec129428417.dir/SIZE_OF_UNSIGNED_LONG_LONG.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_OF_UNSIGNED_LONG_LONG.c
Linking C executable cmTryCompileExec129428417
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec129428417.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec129428417.dir/SIZE_OF_UNSIGNED_LONG_LONG.c.o  -o cmTryCompileExec129428417 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of int16_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec278432398/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec278432398.dir/build.make CMakeFiles/cmTryCompileExec278432398.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec278432398.dir/INT16_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec278432398.dir/INT16_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/INT16_T.c
Linking C executable cmTryCompileExec278432398
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec278432398.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec278432398.dir/INT16_T.c.o  -o cmTryCompileExec278432398 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of int32_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec436262714/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec436262714.dir/build.make CMakeFiles/cmTryCompileExec436262714.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec436262714.dir/INT32_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec436262714.dir/INT32_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/INT32_T.c
Linking C executable cmTryCompileExec436262714
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec436262714.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec436262714.dir/INT32_T.c.o  -o cmTryCompileExec436262714 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of int64_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3810130518/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3810130518.dir/build.make CMakeFiles/cmTryCompileExec3810130518.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3810130518.dir/INT64_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3810130518.dir/INT64_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/INT64_T.c
Linking C executable cmTryCompileExec3810130518
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3810130518.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3810130518.dir/INT64_T.c.o  -o cmTryCompileExec3810130518 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of intmax_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3669453356/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3669453356.dir/build.make CMakeFiles/cmTryCompileExec3669453356.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3669453356.dir/INTMAX_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3669453356.dir/INTMAX_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/INTMAX_T.c
Linking C executable cmTryCompileExec3669453356
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3669453356.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3669453356.dir/INTMAX_T.c.o  -o cmTryCompileExec3669453356 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uint8_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2413181626/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2413181626.dir/build.make CMakeFiles/cmTryCompileExec2413181626.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2413181626.dir/UINT8_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2413181626.dir/UINT8_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINT8_T.c
Linking C executable cmTryCompileExec2413181626
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2413181626.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2413181626.dir/UINT8_T.c.o  -o cmTryCompileExec2413181626 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uint16_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2380708428/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2380708428.dir/build.make CMakeFiles/cmTryCompileExec2380708428.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2380708428.dir/UINT16_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2380708428.dir/UINT16_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINT16_T.c
Linking C executable cmTryCompileExec2380708428
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2380708428.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2380708428.dir/UINT16_T.c.o  -o cmTryCompileExec2380708428 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uint32_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2054457567/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2054457567.dir/build.make CMakeFiles/cmTryCompileExec2054457567.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2054457567.dir/UINT32_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2054457567.dir/UINT32_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINT32_T.c
Linking C executable cmTryCompileExec2054457567
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2054457567.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2054457567.dir/UINT32_T.c.o  -o cmTryCompileExec2054457567 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uint64_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1121868210/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1121868210.dir/build.make CMakeFiles/cmTryCompileExec1121868210.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1121868210.dir/UINT64_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1121868210.dir/UINT64_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINT64_T.c
Linking C executable cmTryCompileExec1121868210
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1121868210.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1121868210.dir/UINT64_T.c.o  -o cmTryCompileExec1121868210 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uintmax_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec272745332/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec272745332.dir/build.make CMakeFiles/cmTryCompileExec272745332.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec272745332.dir/UINTMAX_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec272745332.dir/UINTMAX_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINTMAX_T.c
Linking C executable cmTryCompileExec272745332
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec272745332.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec272745332.dir/UINTMAX_T.c.o  -o cmTryCompileExec272745332 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of dev_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3876451705/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3876451705.dir/build.make CMakeFiles/cmTryCompileExec3876451705.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3876451705.dir/DEV_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3876451705.dir/DEV_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/DEV_T.c
Linking C executable cmTryCompileExec3876451705
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3876451705.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3876451705.dir/DEV_T.c.o  -o cmTryCompileExec3876451705 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of gid_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec790714956/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec790714956.dir/build.make CMakeFiles/cmTryCompileExec790714956.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec790714956.dir/GID_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec790714956.dir/GID_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/GID_T.c
Linking C executable cmTryCompileExec790714956
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec790714956.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec790714956.dir/GID_T.c.o  -o cmTryCompileExec790714956 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of id_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1338540262/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1338540262.dir/build.make CMakeFiles/cmTryCompileExec1338540262.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1338540262.dir/ID_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1338540262.dir/ID_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/ID_T.c
Linking C executable cmTryCompileExec1338540262
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1338540262.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1338540262.dir/ID_T.c.o  -o cmTryCompileExec1338540262 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of mode_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec510264779/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec510264779.dir/build.make CMakeFiles/cmTryCompileExec510264779.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec510264779.dir/MODE_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec510264779.dir/MODE_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/MODE_T.c
Linking C executable cmTryCompileExec510264779
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec510264779.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec510264779.dir/MODE_T.c.o  -o cmTryCompileExec510264779 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of off_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1203120849/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1203120849.dir/build.make CMakeFiles/cmTryCompileExec1203120849.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1203120849.dir/OFF_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1203120849.dir/OFF_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/OFF_T.c
Linking C executable cmTryCompileExec1203120849
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1203120849.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1203120849.dir/OFF_T.c.o  -o cmTryCompileExec1203120849 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of size_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3511050886/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3511050886.dir/build.make CMakeFiles/cmTryCompileExec3511050886.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3511050886.dir/SIZE_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3511050886.dir/SIZE_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZE_T.c
Linking C executable cmTryCompileExec3511050886
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3511050886.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3511050886.dir/SIZE_T.c.o  -o cmTryCompileExec3511050886 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of ssize_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3739717871/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3739717871.dir/build.make CMakeFiles/cmTryCompileExec3739717871.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3739717871.dir/SSIZE_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3739717871.dir/SSIZE_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SSIZE_T.c
Linking C executable cmTryCompileExec3739717871
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3739717871.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3739717871.dir/SSIZE_T.c.o  -o cmTryCompileExec3739717871 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uid_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3937808381/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3937808381.dir/build.make CMakeFiles/cmTryCompileExec3937808381.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3937808381.dir/UID_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3937808381.dir/UID_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UID_T.c
Linking C executable cmTryCompileExec3937808381
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3937808381.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3937808381.dir/UID_T.c.o  -o cmTryCompileExec3937808381 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of pid_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1227000675/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1227000675.dir/build.make CMakeFiles/cmTryCompileExec1227000675.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1227000675.dir/PID_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec1227000675.dir/PID_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/PID_T.c
Linking C executable cmTryCompileExec1227000675
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1227000675.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec1227000675.dir/PID_T.c.o  -o cmTryCompileExec1227000675 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of intptr_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2310443254/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2310443254.dir/build.make CMakeFiles/cmTryCompileExec2310443254.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2310443254.dir/INTPTR_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec2310443254.dir/INTPTR_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/INTPTR_T.c
Linking C executable cmTryCompileExec2310443254
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2310443254.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec2310443254.dir/INTPTR_T.c.o  -o cmTryCompileExec2310443254 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of uintptr_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4093457020/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4093457020.dir/build.make CMakeFiles/cmTryCompileExec4093457020.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4093457020.dir/UINTPTR_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec4093457020.dir/UINTPTR_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/UINTPTR_T.c
Linking C executable cmTryCompileExec4093457020
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4093457020.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec4093457020.dir/UINTPTR_T.c.o  -o cmTryCompileExec4093457020 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining size of wchar_t passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3259336463/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3259336463.dir/build.make CMakeFiles/cmTryCompileExec3259336463.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3259336463.dir/SIZEOF_WCHAR_T.c.o
/usr/bin/gcc   -w     -o CMakeFiles/cmTryCompileExec3259336463.dir/SIZEOF_WCHAR_T.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/SIZEOF_WCHAR_T.c
Linking C executable cmTryCompileExec3259336463
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec3259336463.dir/link.txt --verbose=1
/usr/bin/gcc    -w      CMakeFiles/cmTryCompileExec3259336463.dir/SIZEOF_WCHAR_T.c.o  -o cmTryCompileExec3259336463 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Checking support for ARCHIVE_CRYPTO_MD5_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec10490027/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec10490027.dir/build.make CMakeFiles/cmTryCompileExec10490027.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec10490027.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec10490027.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:61:17: fatal error: md5.h: No such file or directory
 #include <md5.h>
                 ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec10490027.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec10490027/fast] Error 2

Source file was:

#define ARCHIVE_MD5_COMPILE_TEST
#define ARCHIVE_CRYPTO_MD5_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_RMD160_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2632983573/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2632983573.dir/build.make CMakeFiles/cmTryCompileExec2632983573.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2632983573.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec2632983573.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:64:20: fatal error: rmd160.h: No such file or directory
 #include <rmd160.h>
                    ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec2632983573.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec2632983573/fast] Error 2

Source file was:

#define ARCHIVE_RMD160_COMPILE_TEST
#define ARCHIVE_CRYPTO_RMD160_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA1_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec532337815/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec532337815.dir/build.make CMakeFiles/cmTryCompileExec532337815.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec532337815.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec532337815.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:67:18: fatal error: sha1.h: No such file or directory
 #include <sha1.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec532337815.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec532337815/fast] Error 2

Source file was:

#define ARCHIVE_SHA1_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA1_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA256_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3821607213/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3821607213.dir/build.make CMakeFiles/cmTryCompileExec3821607213.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3821607213.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3821607213.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3821607213.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec3821607213/fast] Error 2

Source file was:

#define ARCHIVE_SHA256_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA256_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA384_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1478692810/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1478692810.dir/build.make CMakeFiles/cmTryCompileExec1478692810.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1478692810.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1478692810.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1478692810.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1478692810/fast] Error 2

Source file was:

#define ARCHIVE_SHA384_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA384_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA512_LIBC failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1322656534/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1322656534.dir/build.make CMakeFiles/cmTryCompileExec1322656534.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1322656534.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1322656534.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1322656534.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1322656534/fast] Error 2

Source file was:

#define ARCHIVE_SHA512_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA512_LIBC
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA256_LIBC2 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1992028219/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1992028219.dir/build.make CMakeFiles/cmTryCompileExec1992028219.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1992028219.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1992028219.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1992028219.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1992028219/fast] Error 2

Source file was:

#define ARCHIVE_SHA256_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA256_LIBC2
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA384_LIBC2 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3454952995/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3454952995.dir/build.make CMakeFiles/cmTryCompileExec3454952995.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3454952995.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3454952995.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3454952995.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec3454952995/fast] Error 2

Source file was:

#define ARCHIVE_SHA384_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA384_LIBC2
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA512_LIBC2 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3119926323/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3119926323.dir/build.make CMakeFiles/cmTryCompileExec3119926323.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3119926323.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3119926323.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3119926323.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec3119926323/fast] Error 2

Source file was:

#define ARCHIVE_SHA512_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA512_LIBC2
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA256_LIBC3 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1787470450/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1787470450.dir/build.make CMakeFiles/cmTryCompileExec1787470450.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1787470450.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1787470450.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: *** [CMakeFiles/cmTryCompileExec1787470450.dir/check_crypto_md.c.o] Error 1
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1787470450/fast] Error 2
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#define ARCHIVE_SHA256_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA256_LIBC3
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA384_LIBC3 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1253054836/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1253054836.dir/build.make CMakeFiles/cmTryCompileExec1253054836.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1253054836.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1253054836.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1253054836.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1253054836/fast] Error 2

Source file was:

#define ARCHIVE_SHA384_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA384_LIBC3
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA512_LIBC3 failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3386033219/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3386033219.dir/build.make CMakeFiles/cmTryCompileExec3386033219.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3386033219.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3386033219.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:78:18: fatal error: sha2.h: No such file or directory
 #include <sha2.h>
                  ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3386033219.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec3386033219/fast] Error 2

Source file was:

#define ARCHIVE_SHA512_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA512_LIBC3
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_MD5_LIBSYSTEM failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1132091934/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1132091934.dir/build.make CMakeFiles/cmTryCompileExec1132091934.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1132091934.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1132091934.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
                                       ^
compilation terminated.
make[6]: *** [CMakeFiles/cmTryCompileExec1132091934.dir/check_crypto_md.c.o] Error 1
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1132091934/fast] Error 2

Source file was:

#define ARCHIVE_MD5_COMPILE_TEST
#define ARCHIVE_CRYPTO_MD5_LIBSYSTEM
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA1_LIBSYSTEM failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3983095801/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3983095801.dir/build.make CMakeFiles/cmTryCompileExec3983095801.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3983095801.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3983095801.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
                                       ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3983095801.dir/check_crypto_md.c.o] Error 1
make[5]: *** [cmTryCompileExec3983095801/fast] Error 2
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#define ARCHIVE_SHA1_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA1_LIBSYSTEM
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA256_LIBSYSTEM failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1228551648/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1228551648.dir/build.make CMakeFiles/cmTryCompileExec1228551648.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1228551648.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1228551648.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
                                       ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1228551648.dir/check_crypto_md.c.o] Error 1
make[5]: *** [cmTryCompileExec1228551648/fast] Error 2
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:

#define ARCHIVE_SHA256_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA256_LIBSYSTEM
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA384_LIBSYSTEM failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2615722681/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2615722681.dir/build.make CMakeFiles/cmTryCompileExec2615722681.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2615722681.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec2615722681.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
                                       ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec2615722681.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec2615722681/fast] Error 2

Source file was:

#define ARCHIVE_SHA384_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA384_LIBSYSTEM
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA512_LIBSYSTEM failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2371431300/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2371431300.dir/build.make CMakeFiles/cmTryCompileExec2371431300.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2371431300.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec2371431300.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:112:39: fatal error: CommonCrypto/CommonDigest.h: No such file or directory
 #include <CommonCrypto/CommonDigest.h>
                                       ^
compilation terminated.
make[6]: *** [CMakeFiles/cmTryCompileExec2371431300.dir/check_crypto_md.c.o] Error 1
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec2371431300/fast] Error 2

Source file was:

#define ARCHIVE_SHA512_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA512_LIBSYSTEM
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_MD5_LIBMD failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1633169730/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec1633169730.dir/build.make CMakeFiles/cmTryCompileExec1633169730.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec1633169730.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec1633169730.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:91:17: fatal error: md5.h: No such file or directory
 #include <md5.h>
                 ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec1633169730.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec1633169730/fast] Error 2

Source file was:

#define ARCHIVE_MD5_COMPILE_TEST
#define ARCHIVE_CRYPTO_MD5_LIBMD
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_RMD160_LIBMD failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec764828089/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec764828089.dir/build.make CMakeFiles/cmTryCompileExec764828089.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec764828089.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec764828089.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:94:20: fatal error: ripemd.h: No such file or directory
 #include <ripemd.h>
                    ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec764828089.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec764828089/fast] Error 2

Source file was:

#define ARCHIVE_RMD160_COMPILE_TEST
#define ARCHIVE_CRYPTO_RMD160_LIBMD
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA1_LIBMD failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4249552617/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4249552617.dir/build.make CMakeFiles/cmTryCompileExec4249552617.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4249552617.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec4249552617.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:97:17: fatal error: sha.h: No such file or directory
 #include <sha.h>
                 ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec4249552617.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec4249552617/fast] Error 2

Source file was:

#define ARCHIVE_SHA1_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA1_LIBMD
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA256_LIBMD failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec3554387463/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec3554387463.dir/build.make CMakeFiles/cmTryCompileExec3554387463.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec3554387463.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec3554387463.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:100:20: fatal error: sha256.h: No such file or directory
 #include <sha256.h>
                    ^
compilation terminated.
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[6]: *** [CMakeFiles/cmTryCompileExec3554387463.dir/check_crypto_md.c.o] Error 1
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec3554387463/fast] Error 2

Source file was:

#define ARCHIVE_SHA256_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA256_LIBMD
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Checking support for ARCHIVE_CRYPTO_SHA512_LIBMD failed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2215984751/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2215984751.dir/build.make CMakeFiles/cmTryCompileExec2215984751.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2215984751.dir/check_crypto_md.c.o
/usr/bin/gcc   -w   -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive -I/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp    -o CMakeFiles/cmTryCompileExec2215984751.dir/check_crypto_md.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c
In file included from /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/check_crypto_md.c:36:0:
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Utilities/cmlibarchive/libarchive/archive_crypto_private.h:103:20: fatal error: sha512.h: No such file or directory
 #include <sha512.h>
                    ^
compilation terminated.
make[6]: *** [CMakeFiles/cmTryCompileExec2215984751.dir/check_crypto_md.c.o] Error 1
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: *** [cmTryCompileExec2215984751/fast] Error 2

Source file was:

#define ARCHIVE_SHA512_COMPILE_TEST
#define ARCHIVE_CRYPTO_SHA512_LIBMD
#define PLATFORM_CONFIG_H "check_crypto_md.h"

/*-
* Copyright (c) 2003-2007 Tim Kientzle
* Copyright (c) 2011 Andres Mejia
* Copyright (c) 2011 Michihiro NAKAJIMA
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
* NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "archive_platform.h"

#include "archive.h"
#include "archive_crypto_private.h"

/* In particular, force the configure probe to break if it tries
 * to test a combination of OpenSSL and libmd. */
#if defined(ARCHIVE_CRYPTO_OPENSSL) && defined(ARCHIVE_CRYPTO_LIBMD)
#error Cannot use both OpenSSL and libmd.
#endif

/*
 * Message digest functions for Windows platform.
 */
#if defined(ARCHIVE_CRYPTO_MD5_WIN)    ||\
	defined(ARCHIVE_CRYPTO_SHA1_WIN)   ||\
	defined(ARCHIVE_CRYPTO_SHA256_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA384_WIN) ||\
	defined(ARCHIVE_CRYPTO_SHA512_WIN)

/*
 * Initialize a Message digest.
 */
static int
win_crypto_init(Digest_CTX *ctx, ALG_ID algId)
{

	ctx->valid = 0;
	if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
	    PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)) {
		if (GetLastError() != (DWORD)NTE_BAD_KEYSET)
			return (ARCHIVE_FAILED);
		if (!CryptAcquireContext(&ctx->cryptProv, NULL, NULL,
		    PROV_RSA_FULL, CRYPT_NEWKEYSET))
			return (ARCHIVE_FAILED);
	}

	if (!CryptCreateHash(ctx->cryptProv, algId, 0, 0, &ctx->hash)) {
		CryptReleaseContext(ctx->cryptProv, 0);
		return (ARCHIVE_FAILED);
	}

	ctx->valid = 1;
	return (ARCHIVE_OK);
}

/*
 * Update a Message digest.
 */
static int
win_crypto_Update(Digest_CTX *ctx, const unsigned char *buf, size_t len)
{

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptHashData(ctx->hash,
		      (unsigned char *)(uintptr_t)buf,
		      (DWORD)len, 0);
	return (ARCHIVE_OK);
}

static int
win_crypto_Final(unsigned char *buf, size_t bufsize, Digest_CTX *ctx)
{
	DWORD siglen = bufsize;

	if (!ctx->valid)
		return (ARCHIVE_FAILED);

	CryptGetHashParam(ctx->hash, HP_HASHVAL, buf, &siglen, 0);
	CryptDestroyHash(ctx->hash);
	CryptReleaseContext(ctx->cryptProv, 0);
	ctx->valid = 0;
	return (ARCHIVE_OK);
}

#endif /* defined(ARCHIVE_CRYPTO_*_WIN) */


/* MD5 implementations */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)

static int
__archive_libc_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)

static int
__archive_libmd_md5init(archive_md5_ctx *ctx)
{
  MD5Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  MD5Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_md5final(archive_md5_ctx *ctx, void *md)
{
  MD5Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)

static int
__archive_libsystem_md5init(archive_md5_ctx *ctx)
{
  CC_MD5_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_MD5_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_md5final(archive_md5_ctx *ctx, void *md)
{
  CC_MD5_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)

static int
__archive_nettle_md5init(archive_md5_ctx *ctx)
{
  md5_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  md5_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_md5final(archive_md5_ctx *ctx, void *md)
{
  md5_digest(ctx, MD5_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)

static int
__archive_openssl_md5init(archive_md5_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_md5());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_md5final(archive_md5_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_MD5_WIN)

static int
__archive_windowsapi_md5init(archive_md5_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_MD5));
}

static int
__archive_windowsapi_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_md5final(archive_md5_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 16, ctx));
}

#else

static int
__archive_stub_md5init(archive_md5_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5update(archive_md5_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_md5final(archive_md5_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* RIPEMD160 implementations */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)

static int
__archive_libc_ripemd160init(archive_rmd160_ctx *ctx)
{
  RMD160Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RMD160Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RMD160Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)

static int
__archive_libmd_ripemd160init(archive_rmd160_ctx *ctx)
{
  RIPEMD160_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  RIPEMD160_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  RIPEMD160_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)

static int
__archive_nettle_ripemd160init(archive_rmd160_ctx *ctx)
{
  ripemd160_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  ripemd160_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  ripemd160_digest(ctx, RIPEMD160_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)

static int
__archive_openssl_ripemd160init(archive_rmd160_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_ripemd160());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#else

static int
__archive_stub_ripemd160init(archive_rmd160_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160update(archive_rmd160_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_ripemd160final(archive_rmd160_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA1 implementations */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)

static int
__archive_libc_sha1init(archive_sha1_ctx *ctx)
{
  SHA1Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)

static int
__archive_libmd_sha1init(archive_sha1_ctx *ctx)
{
  SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha1final(archive_sha1_ctx *ctx, void *md)
{
  SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)

static int
__archive_libsystem_sha1init(archive_sha1_ctx *ctx)
{
  CC_SHA1_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA1_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha1final(archive_sha1_ctx *ctx, void *md)
{
  CC_SHA1_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)

static int
__archive_nettle_sha1init(archive_sha1_ctx *ctx)
{
  sha1_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  sha1_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha1final(archive_sha1_ctx *ctx, void *md)
{
  sha1_digest(ctx, SHA1_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)

static int
__archive_openssl_sha1init(archive_sha1_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha1());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha1final(archive_sha1_ctx *ctx, void *md)
{
  /* HACK: archive_write_set_format_xar.c is finalizing empty contexts, so
   * this is meant to cope with that. Real fix is probably to fix
   * archive_write_set_format_xar.c
   */
  if (ctx->digest)
    EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)

static int
__archive_windowsapi_sha1init(archive_sha1_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA1));
}

static int
__archive_windowsapi_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha1final(archive_sha1_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 20, ctx));
}

#else

static int
__archive_stub_sha1init(archive_sha1_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1update(archive_sha1_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha1final(archive_sha1_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA256 implementations */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)

static int
__archive_libc_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)

static int
__archive_libc2_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)

static int
__archive_libc3_sha256init(archive_sha256_ctx *ctx)
{
  SHA256Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)

static int
__archive_libmd_sha256init(archive_sha256_ctx *ctx)
{
  SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha256final(archive_sha256_ctx *ctx, void *md)
{
  SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)

static int
__archive_libsystem_sha256init(archive_sha256_ctx *ctx)
{
  CC_SHA256_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA256_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha256final(archive_sha256_ctx *ctx, void *md)
{
  CC_SHA256_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)

static int
__archive_nettle_sha256init(archive_sha256_ctx *ctx)
{
  sha256_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  sha256_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha256final(archive_sha256_ctx *ctx, void *md)
{
  sha256_digest(ctx, SHA256_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)

static int
__archive_openssl_sha256init(archive_sha256_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha256());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha256final(archive_sha256_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)

static int
__archive_windowsapi_sha256init(archive_sha256_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_256));
}

static int
__archive_windowsapi_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha256final(archive_sha256_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 32, ctx));
}

#else

static int
__archive_stub_sha256init(archive_sha256_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256update(archive_sha256_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha256final(archive_sha256_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA384 implementations */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)

static int
__archive_libc_sha384init(archive_sha384_ctx *ctx)
{
  SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)

static int
__archive_libc2_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)

static int
__archive_libc3_sha384init(archive_sha384_ctx *ctx)
{
  SHA384Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA384Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha384final(archive_sha384_ctx *ctx, void *md)
{
  SHA384Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)

static int
__archive_libsystem_sha384init(archive_sha384_ctx *ctx)
{
  CC_SHA384_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA384_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha384final(archive_sha384_ctx *ctx, void *md)
{
  CC_SHA384_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)

static int
__archive_nettle_sha384init(archive_sha384_ctx *ctx)
{
  sha384_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  sha384_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha384final(archive_sha384_ctx *ctx, void *md)
{
  sha384_digest(ctx, SHA384_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)

static int
__archive_openssl_sha384init(archive_sha384_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha384());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha384final(archive_sha384_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)

static int
__archive_windowsapi_sha384init(archive_sha384_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_384));
}

static int
__archive_windowsapi_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha384final(archive_sha384_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 48, ctx));
}

#else

static int
__archive_stub_sha384init(archive_sha384_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384update(archive_sha384_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha384final(archive_sha384_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* SHA512 implementations */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)

static int
__archive_libc_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)

static int
__archive_libc2_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc2_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)

static int
__archive_libc3_sha512init(archive_sha512_ctx *ctx)
{
  SHA512Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libc3_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)

static int
__archive_libmd_sha512init(archive_sha512_ctx *ctx)
{
  SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libmd_sha512final(archive_sha512_ctx *ctx, void *md)
{
  SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)

static int
__archive_libsystem_sha512init(archive_sha512_ctx *ctx)
{
  CC_SHA512_Init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  CC_SHA512_Update(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_libsystem_sha512final(archive_sha512_ctx *ctx, void *md)
{
  CC_SHA512_Final(md, ctx);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)

static int
__archive_nettle_sha512init(archive_sha512_ctx *ctx)
{
  sha512_init(ctx);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  sha512_update(ctx, insize, indata);
  return (ARCHIVE_OK);
}

static int
__archive_nettle_sha512final(archive_sha512_ctx *ctx, void *md)
{
  sha512_digest(ctx, SHA512_DIGEST_SIZE, md);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)

static int
__archive_openssl_sha512init(archive_sha512_ctx *ctx)
{
  EVP_DigestInit(ctx, EVP_sha512());
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  EVP_DigestUpdate(ctx, indata, insize);
  return (ARCHIVE_OK);
}

static int
__archive_openssl_sha512final(archive_sha512_ctx *ctx, void *md)
{
  EVP_DigestFinal(ctx, md, NULL);
  return (ARCHIVE_OK);
}

#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)

static int
__archive_windowsapi_sha512init(archive_sha512_ctx *ctx)
{
  return (win_crypto_init(ctx, CALG_SHA_512));
}

static int
__archive_windowsapi_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
  return (win_crypto_Update(ctx, indata, insize));
}

static int
__archive_windowsapi_sha512final(archive_sha512_ctx *ctx, void *md)
{
  return (win_crypto_Final(md, 64, ctx));
}

#else

static int
__archive_stub_sha512init(archive_sha512_ctx *ctx)
{
	(void)ctx; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512update(archive_sha512_ctx *ctx, const void *indata,
    size_t insize)
{
	(void)ctx; /* UNUSED */
	(void)indata; /* UNUSED */
	(void)insize; /* UNUSED */
	return (ARCHIVE_FAILED);
}

static int
__archive_stub_sha512final(archive_sha512_ctx *ctx, void *md)
{
	(void)ctx; /* UNUSED */
	(void)md; /* UNUSED */
	return (ARCHIVE_FAILED);
}

#endif

/* NOTE: Crypto functions are set based on availability and by the following
 * order of preference.
 * 1. libc
 * 2. libc2
 * 3. libc3
 * 4. libSystem
 * 5. OpenSSL
 * 6. Windows API
 */
const struct archive_crypto __archive_crypto =
{
/* MD5 */
#if defined(ARCHIVE_CRYPTO_MD5_LIBC)
  &__archive_libc_md5init,
  &__archive_libc_md5update,
  &__archive_libc_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBMD)
  &__archive_libmd_md5init,
  &__archive_libmd_md5update,
  &__archive_libmd_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_LIBSYSTEM)
  &__archive_libsystem_md5init,
  &__archive_libsystem_md5update,
  &__archive_libsystem_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_NETTLE)
  &__archive_nettle_md5init,
  &__archive_nettle_md5update,
  &__archive_nettle_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_OPENSSL)
  &__archive_openssl_md5init,
  &__archive_openssl_md5update,
  &__archive_openssl_md5final,
#elif defined(ARCHIVE_CRYPTO_MD5_WIN)
  &__archive_windowsapi_md5init,
  &__archive_windowsapi_md5update,
  &__archive_windowsapi_md5final,
#elif !defined(ARCHIVE_MD5_COMPILE_TEST)
  &__archive_stub_md5init,
  &__archive_stub_md5update,
  &__archive_stub_md5final,
#endif

/* RIPEMD160 */
#if defined(ARCHIVE_CRYPTO_RMD160_LIBC)
  &__archive_libc_ripemd160init,
  &__archive_libc_ripemd160update,
  &__archive_libc_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_LIBMD)
  &__archive_libmd_ripemd160init,
  &__archive_libmd_ripemd160update,
  &__archive_libmd_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_NETTLE)
  &__archive_nettle_ripemd160init,
  &__archive_nettle_ripemd160update,
  &__archive_nettle_ripemd160final,
#elif defined(ARCHIVE_CRYPTO_RMD160_OPENSSL)
  &__archive_openssl_ripemd160init,
  &__archive_openssl_ripemd160update,
  &__archive_openssl_ripemd160final,
#elif !defined(ARCHIVE_RMD160_COMPILE_TEST)
  &__archive_stub_ripemd160init,
  &__archive_stub_ripemd160update,
  &__archive_stub_ripemd160final,
#endif

/* SHA1 */
#if defined(ARCHIVE_CRYPTO_SHA1_LIBC)
  &__archive_libc_sha1init,
  &__archive_libc_sha1update,
  &__archive_libc_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBMD)
  &__archive_libmd_sha1init,
  &__archive_libmd_sha1update,
  &__archive_libmd_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_LIBSYSTEM)
  &__archive_libsystem_sha1init,
  &__archive_libsystem_sha1update,
  &__archive_libsystem_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_NETTLE)
  &__archive_nettle_sha1init,
  &__archive_nettle_sha1update,
  &__archive_nettle_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_OPENSSL)
  &__archive_openssl_sha1init,
  &__archive_openssl_sha1update,
  &__archive_openssl_sha1final,
#elif defined(ARCHIVE_CRYPTO_SHA1_WIN)
  &__archive_windowsapi_sha1init,
  &__archive_windowsapi_sha1update,
  &__archive_windowsapi_sha1final,
#elif !defined(ARCHIVE_SHA1_COMPILE_TEST)
  &__archive_stub_sha1init,
  &__archive_stub_sha1update,
  &__archive_stub_sha1final,
#endif

/* SHA256 */
#if defined(ARCHIVE_CRYPTO_SHA256_LIBC)
  &__archive_libc_sha256init,
  &__archive_libc_sha256update,
  &__archive_libc_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC2)
  &__archive_libc2_sha256init,
  &__archive_libc2_sha256update,
  &__archive_libc2_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBC3)
  &__archive_libc3_sha256init,
  &__archive_libc3_sha256update,
  &__archive_libc3_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBMD)
  &__archive_libmd_sha256init,
  &__archive_libmd_sha256update,
  &__archive_libmd_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_LIBSYSTEM)
  &__archive_libsystem_sha256init,
  &__archive_libsystem_sha256update,
  &__archive_libsystem_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_NETTLE)
  &__archive_nettle_sha256init,
  &__archive_nettle_sha256update,
  &__archive_nettle_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_OPENSSL)
  &__archive_openssl_sha256init,
  &__archive_openssl_sha256update,
  &__archive_openssl_sha256final,
#elif defined(ARCHIVE_CRYPTO_SHA256_WIN)
  &__archive_windowsapi_sha256init,
  &__archive_windowsapi_sha256update,
  &__archive_windowsapi_sha256final,
#elif !defined(ARCHIVE_SHA256_COMPILE_TEST)
  &__archive_stub_sha256init,
  &__archive_stub_sha256update,
  &__archive_stub_sha256final,
#endif

/* SHA384 */
#if defined(ARCHIVE_CRYPTO_SHA384_LIBC)
  &__archive_libc_sha384init,
  &__archive_libc_sha384update,
  &__archive_libc_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC2)
  &__archive_libc2_sha384init,
  &__archive_libc2_sha384update,
  &__archive_libc2_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBC3)
  &__archive_libc3_sha384init,
  &__archive_libc3_sha384update,
  &__archive_libc3_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_LIBSYSTEM)
  &__archive_libsystem_sha384init,
  &__archive_libsystem_sha384update,
  &__archive_libsystem_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_NETTLE)
  &__archive_nettle_sha384init,
  &__archive_nettle_sha384update,
  &__archive_nettle_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_OPENSSL)
  &__archive_openssl_sha384init,
  &__archive_openssl_sha384update,
  &__archive_openssl_sha384final,
#elif defined(ARCHIVE_CRYPTO_SHA384_WIN)
  &__archive_windowsapi_sha384init,
  &__archive_windowsapi_sha384update,
  &__archive_windowsapi_sha384final,
#elif !defined(ARCHIVE_SHA384_COMPILE_TEST)
  &__archive_stub_sha384init,
  &__archive_stub_sha384update,
  &__archive_stub_sha384final,
#endif

/* SHA512 */
#if defined(ARCHIVE_CRYPTO_SHA512_LIBC)
  &__archive_libc_sha512init,
  &__archive_libc_sha512update,
  &__archive_libc_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC2)
  &__archive_libc2_sha512init,
  &__archive_libc2_sha512update,
  &__archive_libc2_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBC3)
  &__archive_libc3_sha512init,
  &__archive_libc3_sha512update,
  &__archive_libc3_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBMD)
  &__archive_libmd_sha512init,
  &__archive_libmd_sha512update,
  &__archive_libmd_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_LIBSYSTEM)
  &__archive_libsystem_sha512init,
  &__archive_libsystem_sha512update,
  &__archive_libsystem_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_NETTLE)
  &__archive_nettle_sha512init,
  &__archive_nettle_sha512update,
  &__archive_nettle_sha512final,
#elif defined(ARCHIVE_CRYPTO_SHA512_OPENSSL)
  &__archive_openssl_sha512init,
  &__archive_openssl_sha512update,
  &__archive_openssl_sha512final
#elif defined(ARCHIVE_CRYPTO_SHA512_WIN)
  &__archive_windowsapi_sha512init,
  &__archive_windowsapi_sha512update,
  &__archive_windowsapi_sha512final
#elif !defined(ARCHIVE_SHA512_COMPILE_TEST)
  &__archive_stub_sha512init,
  &__archive_stub_sha512update,
  &__archive_stub_sha512final
#endif
};


int
main(int argc, char **argv)
{
  archive__ctx ctx;
  archive__init(&ctx);
  archive__update(&ctx, *argv, argc);
  archive__final(&ctx, NULL);
  return 0;
}

Determining size of unsigned short passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec4046350153/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec4046350153.dir/build.make CMakeFiles/cmTryCompileExec4046350153.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec4046350153.dir/CMAKE_SIZEOF_UNSIGNED_SHORT.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec4046350153.dir/CMAKE_SIZEOF_UNSIGNED_SHORT.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CheckTypeSize/CMAKE_SIZEOF_UNSIGNED_SHORT.c
Linking C executable cmTryCompileExec4046350153
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec4046350153.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec4046350153.dir/CMAKE_SIZEOF_UNSIGNED_SHORT.c.o  -o cmTryCompileExec4046350153 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Determining if the include file elf.h exists passed with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec722769061/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec722769061.dir/build.make CMakeFiles/cmTryCompileExec722769061.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec722769061.dir/CheckIncludeFile.c.o
/usr/bin/gcc    -o CMakeFiles/cmTryCompileExec722769061.dir/CheckIncludeFile.c.o   -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CheckIncludeFile.c
Linking C executable cmTryCompileExec722769061
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec722769061.dir/link.txt --verbose=1
/usr/bin/gcc         CMakeFiles/cmTryCompileExec722769061.dir/CheckIncludeFile.c.o  -o cmTryCompileExec722769061 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'


Performing C++ SOURCE FILE Test run_pic_test succeded with the following output:
Change Dir: /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2347551804/fast"
make[5]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make -f CMakeFiles/cmTryCompileExec2347551804.dir/build.make CMakeFiles/cmTryCompileExec2347551804.dir/build
make[6]: Entering directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_progress_report /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec2347551804.dir/src.cxx.o
/usr/bin/g++    -Drun_pic_test   -fPIE -o CMakeFiles/cmTryCompileExec2347551804.dir/src.cxx.o -c /home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTryCompileExec2347551804
/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/Bootstrap.cmk/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec2347551804.dir/link.txt --verbose=1
/usr/bin/g++      -Drun_pic_test    CMakeFiles/cmTryCompileExec2347551804.dir/src.cxx.o  -o cmTryCompileExec2347551804 -rdynamic 
make[6]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'
make[5]: Leaving directory `/home/ubuntu/Archer_C7_V5/openwrt/build_dir/host/cmake-2.8.9/CMakeFiles/CMakeTmp'

Source file was:
int main() { return 0;}
