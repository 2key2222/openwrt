From c5083be29a8b141dd1b5292a08650d208511a9ce Mon Sep 17 00:00:00 2001
From: nsamsono <nsamsono@marvell.com>
Date: Thu, 15 Jun 2017 14:32:08 +0300
Subject: [PATCH 1785/2241] net: mvpp2x: add Rx interrupts support for Netmap

This patch includes the follow fixes that needed to support this:
1. Pass correct ring ID to the netmap irq handler on Rx interrupt
2. Disable tx interrupts and tx done handling for Netmap ports

Change-Id: Ib414e36380e4f5db78a8d7209205a6a3f7ad58d2
Signed-off-by: nsamsono <nsamsono@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/40526
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h      |  1 +
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h   |  3 ++-
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c | 21 +++++++++------------
 3 files changed, 12 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
index bfc4765..6a958b8 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x.h
@@ -677,6 +677,7 @@ struct mv_pp2x_port {
 	struct mv_pp2x_cos cos_cfg;
 	struct mv_pp2x_rss rss_cfg;
 	struct notifier_block	port_hotplug_nb;
+	int use_interrupts;
 };
 
 struct pp2x_hw_params {
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
index c980adf..c4f78af 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_hw.h
@@ -185,7 +185,8 @@ static inline void mv_pp2x_interrupts_unmask(void *arg)
 	u32 val;
 
 	val = MVPP2_CAUSE_MISC_SUM_MASK | MVPP2_CAUSE_RXQ_OCCUP_DESC_ALL_MASK;
-	if (port->priv->pp2xdata->interrupt_tx_done)
+	/* Don't unmask Tx done interrupts for ports working in Netmap mode*/
+	if (!(port->flags & MVPP2_F_IFCAP_NETMAP) && port->priv->pp2xdata->interrupt_tx_done)
 		val |= MVPP2_CAUSE_TXQ_OCCUP_DESC_ALL_MASK;
 
 	mv_pp2x_write(&port->priv->hw,
diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 609ddc1..3243303 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -2547,7 +2547,7 @@ static int mv_pp2x_rx(struct mv_pp2x_port *port, struct napi_struct *napi,
 		if (port->flags & MVPP2_F_IFCAP_NETMAP) {
 			int netmap_done = 0;
 
-			if (netmap_rx_irq(port->dev, 0, &netmap_done))
+			if (netmap_rx_irq(port->dev, rxq->log_id, &netmap_done))
 				return netmap_done;
 		/* Netmap implementation includes all queues in i/f.*/
 		return 1;
@@ -3346,6 +3346,11 @@ out:
 	}
 	/* PPV22 TX Post-Processing */
 
+#ifdef DEV_NETMAP
+	/* Don't check tx done for ports working in Netmap mode */
+	if ((port->flags & MVPP2_F_IFCAP_NETMAP))
+		return NETDEV_TX_OK;
+#endif
 	if (!port->priv->pp2xdata->interrupt_tx_done)
 		mv_pp2x_tx_done_post_proc(txq, txq_pcpu, port, frags);
 
@@ -3393,16 +3398,8 @@ static inline int mv_pp2x_cause_rx_handle(struct mv_pp2x_port *port,
 
 #ifdef DEV_NETMAP
 	if ((port->flags & MVPP2_F_IFCAP_NETMAP)) {
-		u32 state;
-
-		state = mv_pp2x_qvector_interrupt_state_get(q_vec);
-		if (state)
-			mv_pp2x_qvector_interrupt_disable(q_vec);
-		cause_rx = 0;
 		napi_complete(napi);
-		if (state)
-			mv_pp2x_qvector_interrupt_enable(q_vec);
-		q_vec->pending_cause_rx = cause_rx;
+		q_vec->pending_cause_rx = 0;
 		return rx_done;
 	}
 #endif
@@ -4017,8 +4014,8 @@ int mv_pp2x_stop(struct net_device *dev)
 
 	if (port->priv->pp2_version == PPV22)
 		unregister_hotcpu_notifier(&port->port_hotplug_nb);
-
-	if (!port->priv->pp2xdata->interrupt_tx_done) {
+	/* Cancel tx timers in case Tx done interrupts are disabled and if port is not in Netmap mode */
+	if (!(port->flags & MVPP2_F_IFCAP_NETMAP) && !port->priv->pp2xdata->interrupt_tx_done)  {
 		for_each_present_cpu(cpu) {
 			port_pcpu = per_cpu_ptr(port->pcpu, cpu);
 			hrtimer_cancel(&port_pcpu->tx_done_timer);
-- 
2.7.4

