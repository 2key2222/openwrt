From 22858ee79da7516f392eec8cfef2baeb5215371c Mon Sep 17 00:00:00 2001
From: Zhoujie Wu <zjwu@marvell.com>
Date: Tue, 22 Aug 2017 16:01:35 -0700
Subject: [PATCH 1971/2241] mmc: pwrseq: add specific power sequence support
 for a3700 sd

Armada3700 board needs special SD power sequence to do power cycle before
init SD card. A3700 doesn't have separate power supply for SD vdd,
instead it only has a gpio expander IO pin PWR_EN_SD used to control the
enable of power supply for whole SD module, including VDD and SD card
detection.

The specific SD pwerseq for a3700 will do a power cycle when mmc_power_up,
but keep PWR_EN_SD as high when mmc_power_off for card detection.

Change-Id: I821337be09dd090f6f6de1958aa775fd30c79c6b
Signed-off-by: Zhoujie Wu <zjwu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/43543
Reviewed-by: Kostya Porotchkin <kostap@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
---
 .../bindings/mmc/mmc-pwrseq-a3700-sd.txt           | 13 ++++
 drivers/mmc/core/Makefile                          |  2 +-
 drivers/mmc/core/pwrseq.c                          |  3 +
 drivers/mmc/core/pwrseq.h                          |  2 +
 drivers/mmc/core/pwrseq_a3700_sd.c                 | 85 ++++++++++++++++++++++
 5 files changed, 104 insertions(+), 1 deletion(-)
 create mode 100644 Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
 create mode 100644 drivers/mmc/core/pwrseq_a3700_sd.c

diff --git a/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt b/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
new file mode 100644
index 0000000..7640e91
--- /dev/null
+++ b/Documentation/devicetree/bindings/mmc/mmc-pwrseq-a3700-sd.txt
@@ -0,0 +1,13 @@
+* Marvell armada3700 SD power sequence provider
+
+Required properties:
+- compatible: must be "mmc-pwrseq-a3700-sd".
+- pwren-gpios: contains a pwren GPIO specifier with the
+		   default active state
+
+Example:
+
+	sd_pwrseq: sd_pwrseq {
+		compatible = "mmc-pwrseq-a3700-sd";
+		pwren-gpios = <&expander0 4 GPIO_ACTIVE_HIGH>;
+	}
diff --git a/drivers/mmc/core/Makefile b/drivers/mmc/core/Makefile
index 2c25138..538a291 100644
--- a/drivers/mmc/core/Makefile
+++ b/drivers/mmc/core/Makefile
@@ -8,5 +8,5 @@ mmc_core-y			:= core.o bus.o host.o \
 				   sdio.o sdio_ops.o sdio_bus.o \
 				   sdio_cis.o sdio_io.o sdio_irq.o \
 				   quirks.o slot-gpio.o
-mmc_core-$(CONFIG_OF)		+= pwrseq.o pwrseq_simple.o pwrseq_emmc.o
+mmc_core-$(CONFIG_OF)		+= pwrseq.o pwrseq_simple.o pwrseq_emmc.o pwrseq_a3700_sd.o
 mmc_core-$(CONFIG_DEBUG_FS)	+= debugfs.o
diff --git a/drivers/mmc/core/pwrseq.c b/drivers/mmc/core/pwrseq.c
index 4c1d175..3c7c52c 100644
--- a/drivers/mmc/core/pwrseq.c
+++ b/drivers/mmc/core/pwrseq.c
@@ -29,6 +29,9 @@ static struct mmc_pwrseq_match pwrseq_match[] = {
 	}, {
 		.compatible = "mmc-pwrseq-emmc",
 		.alloc = mmc_pwrseq_emmc_alloc,
+	}, {
+		.compatible = "mmc-pwrseq-a3700-sd",
+		.alloc = mmc_pwrseq_a3700_alloc,
 	},
 };
 
diff --git a/drivers/mmc/core/pwrseq.h b/drivers/mmc/core/pwrseq.h
index 096da48..f12c716 100644
--- a/drivers/mmc/core/pwrseq.h
+++ b/drivers/mmc/core/pwrseq.h
@@ -31,6 +31,8 @@ struct mmc_pwrseq *mmc_pwrseq_simple_alloc(struct mmc_host *host,
 					   struct device *dev);
 struct mmc_pwrseq *mmc_pwrseq_emmc_alloc(struct mmc_host *host,
 					 struct device *dev);
+struct mmc_pwrseq *mmc_pwrseq_a3700_alloc(struct mmc_host *host,
+					 struct device *dev);
 
 #else
 
diff --git a/drivers/mmc/core/pwrseq_a3700_sd.c b/drivers/mmc/core/pwrseq_a3700_sd.c
new file mode 100644
index 0000000..dd248ba
--- /dev/null
+++ b/drivers/mmc/core/pwrseq_a3700_sd.c
@@ -0,0 +1,85 @@
+/*
+ * Driver for Marvell armada3700 SD power sequence
+ *
+ * Copyright (C) 2017 Marvell, All Rights Reserved.
+ *
+ * Author:      Zhoujie Wu <zjwu@marvell.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/of_gpio.h>
+#include <linux/gpio/consumer.h>
+
+#include <linux/mmc/host.h>
+
+#include "pwrseq.h"
+
+struct mmc_pwrseq_a3700 {
+	struct mmc_pwrseq pwrseq;
+	struct gpio_desc *pwren_gpio;
+};
+
+static void mmc_pwrseq_a3700_pre_power_on(struct mmc_host *host)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = container_of(host->pwrseq,
+					struct mmc_pwrseq_a3700, pwrseq);
+
+	gpiod_set_value_cansleep(pwrseq->pwren_gpio, 0);
+	msleep(50);
+}
+
+static void mmc_pwrseq_a3700_post_power_on(struct mmc_host *host)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = container_of(host->pwrseq,
+					struct mmc_pwrseq_a3700, pwrseq);
+
+	gpiod_set_value_cansleep(pwrseq->pwren_gpio, 1);
+}
+
+static void mmc_pwrseq_a3700_free(struct mmc_host *host)
+{
+	struct mmc_pwrseq_a3700 *pwrseq = container_of(host->pwrseq,
+					struct mmc_pwrseq_a3700, pwrseq);
+
+	gpiod_put(pwrseq->pwren_gpio);
+	kfree(pwrseq);
+}
+
+static struct mmc_pwrseq_ops mmc_pwrseq_a3700_ops = {
+	.pre_power_on = mmc_pwrseq_a3700_pre_power_on,
+	.post_power_on = mmc_pwrseq_a3700_post_power_on,
+	.free = mmc_pwrseq_a3700_free,
+};
+
+struct mmc_pwrseq *mmc_pwrseq_a3700_alloc(struct mmc_host *host,
+					   struct device *dev)
+{
+	struct mmc_pwrseq_a3700 *pwrseq;
+	int ret = 0;
+
+	pwrseq = kzalloc(sizeof(*pwrseq), GFP_KERNEL);
+	if (!pwrseq)
+		return ERR_PTR(-ENOMEM);
+
+	pwrseq->pwren_gpio = gpiod_get(dev, "pwren", GPIOD_OUT_HIGH);
+	if (IS_ERR(pwrseq->pwren_gpio)) {
+		ret = PTR_ERR(pwrseq->pwren_gpio);
+		goto free;
+	}
+
+	pwrseq->pwrseq.ops = &mmc_pwrseq_a3700_ops;
+
+	return &pwrseq->pwrseq;
+free:
+	kfree(pwrseq);
+	return ERR_PTR(ret);
+}
-- 
2.7.4

