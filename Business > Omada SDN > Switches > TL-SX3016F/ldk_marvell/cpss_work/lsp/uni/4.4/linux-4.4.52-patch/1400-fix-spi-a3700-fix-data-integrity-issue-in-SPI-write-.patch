From f35a9117f6fb9c78ff20a068a56412472457cae2 Mon Sep 17 00:00:00 2001
From: zachary <zhangzg@marvell.com>
Date: Sat, 14 Jan 2017 00:11:54 +0800
Subject: [PATCH 1400/2241] fix: spi: a3700: fix data integrity issue in SPI
 write operation

- There is a data integrity issue in SPI write operation, that
  2 or 4 bytes data are written incorrectly at the end of each
  block.
- To fix this issue, add SPI_RDY status polling before stop
  writing transfer data.
- This solution does not impact SPI write performance.
- SYSTEMSW-3284 SPI data corrupt issue with low SPI output clock.

Change-Id: I7c2e834f785f5c5aeabb46f3f4dde4434065b8e6
Signed-off-by: zachary <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/35545
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
---
 drivers/spi/spi-armada-3700.c | 18 +++++++-----------
 1 file changed, 7 insertions(+), 11 deletions(-)

diff --git a/drivers/spi/spi-armada-3700.c b/drivers/spi/spi-armada-3700.c
index d1918260..5f4daef 100644
--- a/drivers/spi/spi-armada-3700.c
+++ b/drivers/spi/spi-armada-3700.c
@@ -930,7 +930,8 @@ static int a3700_spi_transfer_finish_non_legacy(struct spi_device *spi,
 	/*
 	 * Stop a write transfer in fifo mode:
 	 *	- wait all the bytes in wfifo to be shifted out
-	 *	 - set XFER_STOP bit
+	 *	- wait spi ready for spi interface to be in idle
+	 *	- set XFER_STOP bit
 	 *	- wait XFER_START bit clear
 	 *	- clear XFER_STOP bit
 	 * Stop a read transfer in fifo mode:
@@ -949,16 +950,11 @@ static int a3700_spi_transfer_finish_non_legacy(struct spi_device *spi,
 				dev_err(&spi->dev, "wait write fifo empty timed out\n");
 				return -ETIMEDOUT;
 			}
-		} else {
-			/*
-			 * If the instruction in SPI_INSTR does not require data to be
-			 * written to the SPI device, wait until SPI_RDY is 1 for the
-			 * SPI interface to be in idle.
-			 */
-			if (!a3700_spi_transfer_wait(spi, A3700_SPI_XFER_RDY)) {
-				dev_err(&spi->dev, "wait transfer ready timed out\n");
-				return -ETIMEDOUT;
-			}
+		}
+
+		if (!a3700_spi_transfer_wait(spi, A3700_SPI_XFER_RDY)) {
+			dev_err(&spi->dev, "wait transfer ready timed out\n");
+			return -ETIMEDOUT;
 		}
 
 		val = spireg_read(a3700_spi, A3700_SPI_IF_CFG_REG);
-- 
2.7.4

