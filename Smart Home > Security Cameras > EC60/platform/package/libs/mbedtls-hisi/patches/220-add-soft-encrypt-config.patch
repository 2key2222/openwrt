diff -uprN origin/include/mbedtls/aes.h new/include/mbedtls/aes.h
--- origin/include/mbedtls/aes.h	2018-01-18 08:59:32.370322359 +0800
+++ new/include/mbedtls/aes.h	2018-01-18 09:00:33.342321189 +0800
@@ -336,6 +336,8 @@ extern "C" {
  */
 int mbedtls_aes_self_test( int verbose );
 
+void mbedtls_set_encrypt_mode(int mode);
+
 #ifdef __cplusplus
 }
 #endif
diff -uprN origin/library/aes.c new/library/aes.c
--- origin/library/aes.c	2018-01-18 08:59:32.334322994 +0800
+++ new/library/aes.c	2018-01-18 09:00:33.314321147 +0800
@@ -52,7 +52,6 @@
 #endif /* MBEDTLS_PLATFORM_C */
 #endif /* MBEDTLS_SELF_TEST */
 
-
 //#define BOARD_HI3518EV200
 #ifdef BOARD_HI3518EV200
 #include <stdio.h>
@@ -89,6 +88,18 @@ typedef struct hisi_aes_cipher
 static HISI_AES_CIPHER g_hisi_aes;
 #endif
 
+static int g_encrypt_hisi = 0;
+
+void mbedtls_set_encrypt_mode(int mode)
+{
+	g_encrypt_hisi = mode;
+}
+
+int mbedtls_get_encrypt_mode()
+{
+	return g_encrypt_hisi ;
+}
+
 
 #ifdef BOARD_HI3518EV200
 static void print_buffer(char *s1, char *s2, int len)
@@ -1159,22 +1170,37 @@ int mbedtls_aes_crypt_cbc( mbedtls_aes_c
     }
     else
     {
-        #ifdef BOARD_HI3518EV200
-        aes_128_cbc_hisi(input, output, length, ctx, iv);
-        #else
-        while( length > 0 )
-        {
-            for( i = 0; i < 16; i++ )
-                output[i] = (unsigned char)( input[i] ^ iv[i] );
-
-            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
-            memcpy( iv, output, 16 );
-
-            input  += 16;
-            output += 16;
-            length -= 16;
-        }
+		if(g_encrypt_hisi == 1){
+			#ifdef BOARD_HI3518EV200
+	        aes_128_cbc_hisi(input, output, length, ctx, iv);
+	        #else
+	        while( length > 0 )
+	        {
+	            for( i = 0; i < 16; i++ )
+	                output[i] = (unsigned char)( input[i] ^ iv[i] );
+
+	            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
+	            memcpy( iv, output, 16 );
+
+	            input  += 16;
+	            output += 16;
+	            length -= 16;
+	        }
         #endif
+		}else{
+			while( length > 0 )
+	        {
+	            for( i = 0; i < 16; i++ )
+	                output[i] = (unsigned char)( input[i] ^ iv[i] );
+
+	            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
+	            memcpy( iv, output, 16 );
+
+	            input  += 16;
+	            output += 16;
+	            length -= 16;
+	        }
+		}
     }
 
     return( 0 );
