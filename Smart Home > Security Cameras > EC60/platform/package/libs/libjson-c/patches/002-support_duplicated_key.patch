diff --git a/json_tokener.h b/json_tokener.h
--- a/json_tokener.h
+++ b/json_tokener.h
@@ -98,6 +98,7 @@
  * @see json_tokener_set_flags()
  */
 #define JSON_TOKENER_STRICT  0x01
+#define JSON_TOKENER_KEYDUP  0x02

 /**
  * Given an error previously returned by json_tokener_get_error(),
@@ -125,6 +125,7 @@  extern struct json_object* json_tokener_parse(const
 extern struct json_object* json_tokener_parse(const char *str);
 extern struct json_object* json_tokener_parse_verbose(const char *str, enum json_tokener_error *error);
+extern struct json_object* json_tokener_parse_with_len(const char *str, int len, int dupkey);
 
 /**
  * Set flags that control how parsing will be done.
  */
diff --git a/json_object.c b/json_object.c
--- a/json_object.c
+++ b/json_object.c
@@ -377,7 +377,13 @@ void json_object_object_add_nocheck(struct json
   }
 }

+void json_object_object_add_nocheck(struct json_object* jso, const char *key,
+			    struct json_object *val)
+{
+	lh_table_insert(jso->o.c_object, strdup(key), val);
+}
+
 void json_object_object_add(struct json_object* jso, const char *key,
 			    struct json_object *val)
 {
 	// We lookup the entry and replace the value, rather than just deleting
diff --git a/json_tokener.c b/json_tokener.c
--- a/json_tokener.c
+++ b/json_tokener.c
@@ -820,8 +820,13 @@ struct json_object* json_tokener_parse_e
       goto redo_char;
 
     case json_tokener_state_object_value_add:
+      if (tok->flags & JSON_TOKENER_KEYDUP) {
+     void json_object_object_add_nocheck(struct json_object* jso, const char *key, struct json_object *val);
+     json_object_object_add_nocheck(current, obj_field_name, obj);
+      } else {
       json_object_object_add(current, obj_field_name, obj);
+      }
       free(obj_field_name);
       obj_field_name = NULL;
       saved_state = json_tokener_state_object_sep;
       state = json_tokener_state_eatws;
@@ -884,3 +889,25 @@ void json_tokener_set_flags(struct json_
 {
 	tok->flags = flags;
 }
+
+struct json_object* json_tokener_parse_with_len(const char *str, int len, int dupkey)
+{
+    struct json_tokener* tok;
+    struct json_object* obj;
+
+    tok = json_tokener_new();
+    if (!tok)
+      return NULL;
+    if (dupkey) {
+       json_tokener_set_flags(tok, JSON_TOKENER_KEYDUP);
+    }
+    obj = json_tokener_parse_ex(tok, str, len);
+    if(tok->err != json_tokener_success) {
+		if (obj != NULL)
+			json_object_put(obj);
+        obj = NULL;
+    }
+
+    json_tokener_free(tok);
+    return obj;
+}
