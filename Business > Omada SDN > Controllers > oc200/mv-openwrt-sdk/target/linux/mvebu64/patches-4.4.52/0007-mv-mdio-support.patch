diff -Nuar a/drivers/net/ethernet/marvell/mvmdio.c b/drivers/net/ethernet/marvell/mvmdio.c
--- a/drivers/net/ethernet/marvell/mvmdio.c	2017-11-16 11:10:56.000000000 +0800
+++ b/drivers/net/ethernet/marvell/mvmdio.c	2019-12-03 13:00:34.000000000 +0800
@@ -64,6 +64,8 @@
 	wait_queue_head_t smi_busy_wait;
 };
 
+struct mii_bus *g_marvell_mii_bus = NULL;
+
 static int orion_mdio_smi_is_done(struct orion_mdio_dev *dev)
 {
 	return !(readl(dev->regs) & MVMDIO_SMI_BUSY);
@@ -249,6 +251,8 @@
 
 	platform_set_drvdata(pdev, bus);
 
+    g_marvell_mii_bus = bus;
+
 	return 0;
 
 out_mdio:
@@ -267,6 +271,8 @@
 	if (!IS_ERR(dev->clk))
 		clk_disable_unprepare(dev->clk);
 
+    g_marvell_mii_bus = NULL;
+
 	return 0;
 }
 
@@ -287,6 +293,43 @@
 
 module_platform_driver(orion_mdio_driver);
 
+
+void MDC_MDIO_READ(uint32_t preamble_len,
+                   int32_t phy_id,
+                   int32_t register_id,
+                   uint32_t *pdata)
+{
+    int val = 0;
+
+    if (NULL == g_marvell_mii_bus) 
+    {
+        printk("############%s:%d: g_marvell_mii_bus is null\r\n", __func__, __LINE__);
+        return;
+    }
+
+    val = mdiobus_read(g_marvell_mii_bus, phy_id, register_id);
+
+    *pdata = val;
+}
+EXPORT_SYMBOL(MDC_MDIO_READ);
+
+void MDC_MDIO_WRITE(uint32_t preamble_len,
+                    int32_t phy_id,
+                    int32_t register_id,
+                    uint16_t data)
+{
+    if (NULL == g_marvell_mii_bus) 
+    {
+        printk("############%s:%d: g_marvell_mii_bus is null\r\n", __func__, __LINE__);
+        return;
+    }
+
+    mdiobus_write(g_marvell_mii_bus, phy_id, register_id, data);
+    
+}
+EXPORT_SYMBOL(MDC_MDIO_WRITE);
+
+
 MODULE_DESCRIPTION("Marvell MDIO interface driver");
 MODULE_AUTHOR("Thomas Petazzoni <thomas.petazzoni@free-electrons.com>");
 MODULE_LICENSE("GPL");
