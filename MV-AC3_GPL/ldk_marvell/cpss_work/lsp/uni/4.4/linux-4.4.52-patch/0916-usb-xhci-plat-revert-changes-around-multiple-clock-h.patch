From ca92c9c6ddd850c6e9113c8e099e1455177abc15 Mon Sep 17 00:00:00 2001
From: Marcin Wojtas <mw@semihalf.com>
Date: Thu, 25 Aug 2016 09:03:56 +0200
Subject: [PATCH 0916/2241] usb: xhci-plat: revert changes around multiple
 clock handling

New CP110 system controller driver provides proper clock tree structure,
hence there is no need to work-around it with obtaining clocks in a loop.

Reverted patches:
commit b3730ec7d907
("xhci: plat: enable the clk before calling the xhci quirk init")

commit 4d1a74d761b6
("xhci: plat: add support for registering multiple clocks")

This patch is part of patch-set which adds
mainline mvebu clock gating support [11/21].

Change-Id: I99f790be84897406c7d554097532f4f0cf8b9883
Signed-off-by: Marcin Wojtas <mw@semihalf.com>
Signed-off-by: Igal Liberman <igall@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/32396
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: Omri Itach <omrii@marvell.com>
---
 drivers/usb/host/xhci-plat.c | 36 +++++++++++++++---------------------
 drivers/usb/host/xhci.h      |  4 +---
 2 files changed, 16 insertions(+), 24 deletions(-)

diff --git a/drivers/usb/host/xhci-plat.c b/drivers/usb/host/xhci-plat.c
index 7f40bde..d71e32a 100644
--- a/drivers/usb/host/xhci-plat.c
+++ b/drivers/usb/host/xhci-plat.c
@@ -84,7 +84,6 @@ static int xhci_plat_probe(struct platform_device *pdev)
 	struct clk              *clk;
 	int			ret;
 	int			irq;
-	int			i;
 
 	if (usb_disabled())
 		return -ENODEV;
@@ -124,20 +123,18 @@ static int xhci_plat_probe(struct platform_device *pdev)
 	hcd->rsrc_start = res->start;
 	hcd->rsrc_len = resource_size(res);
 
-	xhci = hcd_to_xhci(hcd);
-
 	/*
 	 * Not all platforms have a clk so it is not an error if the
 	 * clock does not exists.
 	 */
-	for (i = 0; i < MAX_XHCI_CLOCKS; i++) {
-		clk = of_clk_get(pdev->dev.of_node, i);
-		if (!IS_ERR(clk)) {
-			ret = clk_prepare_enable(clk);
-			if (ret)
-				goto disable_clk;
-			xhci->clk[i] = clk;
-		}
+	clk = devm_clk_get(&pdev->dev, NULL);
+	if (!IS_ERR(clk)) {
+		ret = clk_prepare_enable(clk);
+		if (ret)
+			goto put_hcd;
+	} else if (PTR_ERR(clk) == -EPROBE_DEFER) {
+		ret = -EPROBE_DEFER;
+		goto put_hcd;
 	}
 
 	if (of_device_is_compatible(pdev->dev.of_node,
@@ -151,6 +148,8 @@ static int xhci_plat_probe(struct platform_device *pdev)
 
 	device_wakeup_enable(hcd->self.controller);
 
+	xhci = hcd_to_xhci(hcd);
+	xhci->clk = clk;
 	xhci->main_hcd = hcd;
 	xhci->shared_hcd = usb_create_shared_hcd(driver, &pdev->dev,
 			dev_name(&pdev->dev), hcd);
@@ -199,10 +198,8 @@ put_usb3_hcd:
 	usb_put_hcd(xhci->shared_hcd);
 
 disable_clk:
-	for (i = 0; i < MAX_XHCI_CLOCKS; i++) {
-		if (!IS_ERR(xhci->clk[i]))
-			clk_disable_unprepare(xhci->clk[i]);
-	}
+	if (!IS_ERR(clk))
+		clk_disable_unprepare(clk);
 
 put_hcd:
 	usb_put_hcd(hcd);
@@ -214,7 +211,7 @@ static int xhci_plat_remove(struct platform_device *dev)
 {
 	struct usb_hcd	*hcd = platform_get_drvdata(dev);
 	struct xhci_hcd	*xhci = hcd_to_xhci(hcd);
-	int i;
+	struct clk *clk = xhci->clk;
 
 	usb_remove_hcd(xhci->shared_hcd);
 	usb_phy_shutdown(hcd->usb_phy);
@@ -222,11 +219,8 @@ static int xhci_plat_remove(struct platform_device *dev)
 	usb_remove_hcd(hcd);
 	usb_put_hcd(xhci->shared_hcd);
 
-	for (i = 0; i < MAX_XHCI_CLOCKS; i++) {
-		if (!IS_ERR(xhci->clk[i]))
-			clk_disable_unprepare(xhci->clk[i]);
-	}
-
+	if (!IS_ERR(clk))
+		clk_disable_unprepare(clk);
 	usb_put_hcd(hcd);
 
 	return 0;
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index a8836f9..fc2ee6c 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1332,8 +1332,6 @@ union xhci_trb {
 #define TRB_MAX_BUFF_SHIFT		16
 #define TRB_MAX_BUFF_SIZE	(1 << TRB_MAX_BUFF_SHIFT)
 
-#define MAX_XHCI_CLOCKS		4
-
 struct xhci_segment {
 	union xhci_trb		*trbs;
 	/* private to HCD */
@@ -1544,7 +1542,7 @@ struct xhci_hcd {
 	int		msix_count;
 	struct msix_entry	*msix_entries;
 	/* optional clock */
-	struct clk		*clk[MAX_XHCI_CLOCKS];
+	struct clk		*clk;
 	/* data structures */
 	struct xhci_device_context_array *dcbaa;
 	struct xhci_ring	*cmd_ring;
-- 
2.7.4

