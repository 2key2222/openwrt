From f2baae0a9165c70460eebf518c3aaf43ac019322 Mon Sep 17 00:00:00 2001
From: zachary <zhangzg@marvell.com>
Date: Fri, 11 Nov 2016 21:56:33 +0800
Subject: [PATCH 1135/2241] fix: spi: a3700: correct fifo threshold settings

The SPI fifo threshold is adaptive to SPI transfer byte length
automatically.
When SPI is set to 1-byte shift mode, one fifo entry represents
the 1-byte data.
When SPI is set to 4-byte shift mode, one fifo entry represents
the 4-bytes data. Thus, we should always set 1-entry as read
threshold and 7-entries as write threshold.

Change-Id: Ief8e176fd50e78e01e86fd1100c4ec1a16af657e
Signed-off-by: zachary <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/33675
Tested-by: Star_Automation <star@marvell.com>
Reviewed-by: Wilson Ding <dingwei@marvell.com>
---
 drivers/spi/spi-armada-3700.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/drivers/spi/spi-armada-3700.c b/drivers/spi/spi-armada-3700.c
index b62e689..6540021 100644
--- a/drivers/spi/spi-armada-3700.c
+++ b/drivers/spi/spi-armada-3700.c
@@ -79,6 +79,8 @@
 #define A3700_SPI_WFIFO_THRS_BIT		28
 #define A3700_SPI_RFIFO_THRS_BIT		24
 #define A3700_SPI_FIFO_THRS_MASK		0x7
+#define A3700_SPI_WFIFO_THRS_7_DATA_ENTRIES	7
+#define A3700_SPI_RFIFO_THRS_1_DATA_ENTRY	0
 
 #define A3700_SPI_DATA_PIN_BIT		10
 #define A3700_SPI_DATA_PIN_MASK		0x3
@@ -291,17 +293,18 @@ static void a3700_spi_bytelen_set(struct a3700_spi *a3700_spi, unsigned int len)
 	a3700_spi->status.byte_len = len;
 }
 
-static void a3700_spi_fifo_thres_set(struct a3700_spi *a3700_spi,
-	unsigned int bytes)
+static void a3700_spi_fifo_thres_set(struct a3700_spi *a3700_spi)
 {
 	u32 val;
 
 	if (a3700_spi->flags & HAS_FIFO) {
 		val = spireg_read(a3700_spi, A3700_SPI_IF_CFG_REG);
 		val &= ~(A3700_SPI_FIFO_THRS_MASK << A3700_SPI_RFIFO_THRS_BIT);
-		val |= (bytes - 1) << A3700_SPI_RFIFO_THRS_BIT;
+		/* set 1 data entry for read FIFO threshold */
+		val |= A3700_SPI_RFIFO_THRS_1_DATA_ENTRY << A3700_SPI_RFIFO_THRS_BIT;
 		val &= ~(A3700_SPI_FIFO_THRS_MASK << A3700_SPI_WFIFO_THRS_BIT);
-		val |= (7 - bytes) << A3700_SPI_WFIFO_THRS_BIT;
+		/* set 7 data entries for write FIFO threshold */
+		val |= A3700_SPI_WFIFO_THRS_7_DATA_ENTRIES << A3700_SPI_WFIFO_THRS_BIT;
 		spireg_write(a3700_spi, A3700_SPI_IF_CFG_REG, val);
 	}
 }
@@ -484,7 +487,7 @@ static int a3700_spi_transfer_setup(struct spi_device *spi,
 		a3700_spi_bytelen_set(a3700_spi, byte_len);
 
 		/* Set FIFO threshold */
-		a3700_spi_fifo_thres_set(a3700_spi, byte_len);
+		a3700_spi_fifo_thres_set(a3700_spi);
 
 		/* Activate CS */
 		a3700_spi_activate_cs(a3700_spi, spi->chip_select);
-- 
2.7.4

