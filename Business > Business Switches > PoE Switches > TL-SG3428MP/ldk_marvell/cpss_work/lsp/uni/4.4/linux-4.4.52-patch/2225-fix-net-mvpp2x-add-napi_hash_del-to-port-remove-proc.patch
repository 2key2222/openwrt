From babd6826940c8438c1139fea9fb18b110887ca0a Mon Sep 17 00:00:00 2001
From: Alex Zemtzov <azemtzov@marvell.com>
Date: Mon, 20 Nov 2017 15:59:35 +0200
Subject: [PATCH 2225/2241] fix: net: mvpp2x: add napi_hash_del to port remove
 procedure

Issue: insmod crash in the napi_hash_add due to hlist overflow

Fix: add napi_hash_del() while remove the module

Change-Id: I5890314b54432146adafd4aa0a95dd7f06cd7d4e
Signed-off-by: Alex Zemtzov <azemtzov@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/46463
Reviewed-by: Omri Itach <omrii@marvell.com>
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
---
 drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c | 31 ++++++++++++++++++----
 1 file changed, 26 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
index 14d54d2..5ca8380 100644
--- a/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
+++ b/drivers/net/ethernet/marvell/mvpp2x/mv_pp2x_main.c
@@ -3816,6 +3816,25 @@ void mv_pp2x_port_napi_disable(struct mv_pp2x_port *port)
 	}
 }
 
+static void mv_pp2x_port_napi_remove(struct mv_pp2x_port *port)
+{
+	int i, sub_vec_id;
+	struct queue_vector *qvec;
+
+	for (i = 0; i < port->num_qvector; i++) {
+		qvec = &port->q_vector[i];
+		if (!qvec->num_of_sub_vectors || mv_pp2x_queue_mode == MVPP2_QDIST_SINGLE_MODE) {
+			napi_hash_del(&qvec->sub_vec[0]->napi);
+			netif_napi_del(&qvec->sub_vec[0]->napi);
+		} else {
+			for (sub_vec_id = 0; sub_vec_id < qvec->num_of_sub_vectors; sub_vec_id++) {
+				napi_hash_del(&qvec->sub_vec[sub_vec_id]->napi);
+				netif_napi_del(&qvec->sub_vec[sub_vec_id]->napi);
+			}
+		}
+	}
+}
+
 static void mv_pp2x_port_irqs_dispose_mapping(struct mv_pp2x_port *port)
 {
 	int i;
@@ -5410,12 +5429,12 @@ static int mv_pp2x_port_init(struct mv_pp2x_port *port)
 	err = mv_pp2x_port_txqs_init(dev, port);
 
 	if (err)
-		goto err_free_percpu;
+		goto out;
 
 	/* Associate physical Rx queues to port and initialize.  */
 	err = mv_pp2x_port_rxqs_init(dev, port);
 	if (err)
-		goto err_free_percpu;
+		goto out;
 
 	/* Create Rx descriptor rings */
 	for (queue = 0; queue < port->num_rx_queues; queue++) {
@@ -5434,10 +5453,11 @@ static int mv_pp2x_port_init(struct mv_pp2x_port *port)
 
 	err = mv_pp2x_port_hw_init(port);
 	if (err)
-		goto err_free_percpu;
+		goto out;
 	return 0;
 
-err_free_percpu:
+out:
+	mv_pp2x_port_napi_remove(port);
 
 	return err;
 }
@@ -5929,7 +5949,7 @@ static int mv_pp2x_port_probe(struct platform_device *pdev,
 	dev_err(&pdev->dev, "%s failed for port_id(%d)\n", __func__, id);
 
 err_unreg_netdev:
-		unregister_netdev(dev);
+	unregister_netdev(dev);
 err_free_stats:
 	free_percpu(port->stats);
 err_free_irq:
@@ -5951,6 +5971,7 @@ static void mv_pp2x_port_remove(struct mv_pp2x_port *port)
 		kfree(port->uio.u_info.name);
 	}
 
+	mv_pp2x_port_napi_remove(port);
 	unregister_netdev(port->dev);
 
 	if (port->mac_data.phy_node)
-- 
2.7.4

