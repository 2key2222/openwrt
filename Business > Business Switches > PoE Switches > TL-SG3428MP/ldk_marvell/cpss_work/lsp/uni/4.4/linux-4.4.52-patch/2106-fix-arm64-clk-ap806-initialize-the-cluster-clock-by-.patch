From 6d5cacfd5d09e9cbf4aa8b4b4b301d62188ee07d Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Mon, 18 Dec 2017 16:39:00 +0800
Subject: [PATCH 2106/2241] fix: arm64: clk: ap806: initialize the cluster
 clock by first valid CPU

During current AP806 cluster clock initialization, the cluster clock is
fixed to be initialized by the first CPU in despite of whether it is
valid or not, which makes the cluster clock uninitialized in case the
first CPU within the cluster is disabled, while the other CPUs within
this cluster are still valid, finally these CPUs will fail to get the
cluter clock and lead to issue.
For example, when disable the third CPU in u-boot environment, the
second cluster clock will not be initialized, which leads to the
failure in DFS probe routine when the fourth CPU get the clock,
finnally DFS fails to register "cpufreq-dt" type of platform device.
In order to fix this issue, need to initialize the cluster clock
by the first valid CPU.

Change-Id: I2ff8904a919854236dc87bb91c0b4aa5081aec82
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/47740
Reviewed-by: Omri Itach <omrii@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/clk/mvebu/ap806-cpu-clk.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/drivers/clk/mvebu/ap806-cpu-clk.c b/drivers/clk/mvebu/ap806-cpu-clk.c
index 65e9347..5e6f916 100644
--- a/drivers/clk/mvebu/ap806-cpu-clk.c
+++ b/drivers/clk/mvebu/ap806-cpu-clk.c
@@ -201,11 +201,12 @@ static int ap806_clk_probe(struct platform_device *pdev)
 		if (WARN_ON(err))
 			return err;
 
-		/* initialize only for 1st CPU of each cluster (CPU0, CPU2, ..) */
-		if (cpu & APN806_CPU1_MASK)
+		cluster_index = (cpu & APN806_CLUSTER_NUM_MASK) >> APN806_CLUSTER_NUM_OFFSET;
+
+		/* Initialize once for one cluster */
+		if (cluster_clks[cluster_index])
 			continue;
 
-		cluster_index = (cpu & APN806_CLUSTER_NUM_MASK) >> APN806_CLUSTER_NUM_OFFSET;
 		sprintf(clk_name, "cluster%d", cluster_index);
 		ap806_clk[cluster_index].parent_name = of_clk_get_parent_name(np, 0);
 		ap806_clk[cluster_index].clk_name = clk_name;
-- 
2.7.4

