From aad5c99c9ae908de1e7f123713d4a0a5f4933bdf Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Wed, 11 Oct 2017 16:30:11 +0800
Subject: [PATCH 2093/2241] fix: usb: hcd: fix USB regulator warning during
 reboot

There is below warning during reboot:

[  568.771941] WARNING: at drivers/regulator/core.c:2199
...
[  568.913576] Call trace:
[  568.916032] [<ffffffc000582d54>] _regulator_disable+0xec/0x180
[  568.921890] [<ffffffc000582e30>] regulator_disable+0x48/0x78
...
[  568.984077] usb_phy_generic cpn-110-master:cpm_usb3_phy1: Failed to disable power

The warning happens when associate both USB PHY and generic PHY to same
HCD. There is a single boolean hcd->remove_phy to tell the framework
whether it should remove the USB PHY and the generic PHY.
In the xhci-plat case, it's xhci_plat_probe() that sets hcd->usb_phy,
which will not set hcd->remove_phy to 1, however after adding a "PHY"
property, the hcd->remove_phy will be set to 1 when calling usb_add_hcd().
Therefore in xhci_plat_remove() routine called by reboot, the USB PHY
will be shutdown twice, which calls regulator_disable twice and leads
to warning.
The first calling is done by usb_phy_shutdown(hcd->usb_phy) directly,
the second one is done in usb_remove_hcd(hcd):
	if (hcd->remove__phy && hcd->usb_phy) {
		usb_phy_shutdown(hcd->usb_phy);
		usb_put_phy(hcd->usb_phy);
		hcd->usb_phy = NULL;
	}
The proper fix is to add a new flag to separate the removing of USB PHY
and generic PHY.

Change-Id: I9ce755b6d0eda2b365f417fcd9c016a4eb53cdee
Signed-off-by: Victor Gu <xigu@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/45106
Reviewed-by: Hanna Hawa <hannah@marvell.com>
Tested-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/usb/core/hcd.c  | 6 +++---
 include/linux/usb/hcd.h | 3 ++-
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index cb7fd1a..41f933e 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -2701,7 +2701,7 @@ int usb_add_hcd_with_phy_name(struct usb_hcd *hcd,
 				return retval;
 			}
 			hcd->usb_phy = phy;
-			hcd->remove_phy = 1;
+			hcd->remove_usb_phy = 1;
 		}
 	}
 
@@ -2903,7 +2903,7 @@ err_create_buf:
 		hcd->phy = NULL;
 	}
 err_phy:
-	if (hcd->remove_phy && hcd->usb_phy) {
+	if (hcd->remove_usb_phy && hcd->usb_phy) {
 		usb_phy_shutdown(hcd->usb_phy);
 		usb_put_phy(hcd->usb_phy);
 		hcd->usb_phy = NULL;
@@ -3003,7 +3003,7 @@ void usb_remove_hcd(struct usb_hcd *hcd)
 		phy_put(hcd->phy);
 		hcd->phy = NULL;
 	}
-	if (hcd->remove_phy && hcd->usb_phy) {
+	if (hcd->remove_usb_phy && hcd->usb_phy) {
 		usb_phy_shutdown(hcd->usb_phy);
 		usb_put_phy(hcd->usb_phy);
 		hcd->usb_phy = NULL;
diff --git a/include/linux/usb/hcd.h b/include/linux/usb/hcd.h
index 593fdfc..80c51ca 100644
--- a/include/linux/usb/hcd.h
+++ b/include/linux/usb/hcd.h
@@ -147,7 +147,8 @@ struct usb_hcd {
 	unsigned		rh_registered:1;/* is root hub registered? */
 	unsigned		rh_pollable:1;	/* may we poll the root hub? */
 	unsigned		msix_enabled:1;	/* driver has MSI-X enabled? */
-	unsigned		remove_phy:1;	/* auto-remove USB phy */
+	unsigned		remove_usb_phy:1;/* auto-remove USB phy */
+	unsigned		remove_phy:1;	/* auto-remove generic phy */
 
 	/* The next flag is a stopgap, to be removed when all the HCDs
 	 * support the new root-hub polling mechanism. */
-- 
2.7.4

