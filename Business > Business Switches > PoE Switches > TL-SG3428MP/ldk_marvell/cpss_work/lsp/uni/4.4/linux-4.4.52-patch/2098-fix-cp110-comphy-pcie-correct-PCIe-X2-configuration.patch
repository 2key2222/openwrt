From 1d30604e272da1cd7dafe174b3e1003202d82342 Mon Sep 17 00:00:00 2001
From: Evan Wang <xswang@marvell.com>
Date: Fri, 15 Sep 2017 15:22:31 +0800
Subject: [PATCH 2098/2241] fix: cp110: comphy: pcie: correct PCIe X2
 configuration

For PCIe X2, when enable/disable write to all lanes in
one write, 4 lanes are always configured, which is not
correct.

Change-Id: I397919d415e770271ebc54f1e8d3355118e3a48c
Signed-off-by: Evan Wang <xswang@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/44418
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hanna Hawa <hannah@marvell.com>
---
 drivers/phy/phy-comphy-cp110.c | 33 ++++++++++++++++++++++-----------
 drivers/phy/phy-comphy-cp110.h |  4 ++--
 2 files changed, 24 insertions(+), 13 deletions(-)

diff --git a/drivers/phy/phy-comphy-cp110.c b/drivers/phy/phy-comphy-cp110.c
index 1dd6083..6eaa1a8 100644
--- a/drivers/phy/phy-comphy-cp110.c
+++ b/drivers/phy/phy-comphy-cp110.c
@@ -796,12 +796,12 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 
 	/* enable PCIe X4 and X2 */
 	if (lane == COMPHY_LANE0) {
-		if (pcie_width == 4) {
+		if (pcie_width == PCIE_LNK_X4) {
 			data = 0x1 << COMMON_PHY_SD_CTRL1_PCIE_X4_EN_OFFSET;
 			mask = COMMON_PHY_SD_CTRL1_PCIE_X4_EN_MASK;
 			reg_set(priv->comphy_regs + COMMON_PHY_SD_CTRL1,
 				data, mask);
-		} else if (pcie_width == 2) {
+		} else if (pcie_width == PCIE_LNK_X2) {
 			data = 0x1 << COMMON_PHY_SD_CTRL1_PCIE_X2_EN_OFFSET;
 			mask = COMMON_PHY_SD_CTRL1_PCIE_X2_EN_MASK;
 			reg_set(priv->comphy_regs + COMMON_PHY_SD_CTRL1,
@@ -896,7 +896,7 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 	/* Set PLL ready delay for 0x2 */
 	data = 0x2 << HPIPE_CLK_SRC_LO_PLL_RDY_DL_OFFSET;
 	mask = HPIPE_CLK_SRC_LO_PLL_RDY_DL_MASK;
-	if (pcie_width != 1) {
+	if (pcie_width != PCIE_LNK_X1) {
 		data |= 0x1 << HPIPE_CLK_SRC_LO_BUNDLE_PERIOD_SEL_OFFSET;
 		mask |= HPIPE_CLK_SRC_LO_BUNDLE_PERIOD_SEL_MASK;
 		data |= 0x1 << HPIPE_CLK_SRC_LO_BUNDLE_PERIOD_SCALE_OFFSET;
@@ -907,7 +907,7 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 	/* Set PIPE mode interface to PCIe3 - 0x1  & set lane order */
 	data = 0x1 << HPIPE_CLK_SRC_HI_MODE_PIPE_OFFSET;
 	mask = HPIPE_CLK_SRC_HI_MODE_PIPE_MASK;
-	if (pcie_width != 1) {
+	if (pcie_width != PCIE_LNK_X1) {
 		mask |= HPIPE_CLK_SRC_HI_LANE_STRT_MASK;
 		mask |= HPIPE_CLK_SRC_HI_LANE_MASTER_MASK;
 		mask |= HPIPE_CLK_SRC_HI_LANE_BREAK_MASK;
@@ -969,7 +969,7 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 	reg_set(hpipe_addr + HPIPE_PWR_PLL_REG, data, mask);
 
 	/* ref clock alignment */
-	if (pcie_width != 1) {
+	if (pcie_width != PCIE_LNK_X1) {
 		mask = HPIPE_LANE_ALIGN_OFF_MASK;
 		data = 0x0 << HPIPE_LANE_ALIGN_OFF_OFFSET;
 		reg_set(hpipe_addr + HPIPE_LANE_ALIGN_REG, data, mask);
@@ -1170,13 +1170,16 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 	/* For PCIe X4 or X2:
 	 * release from reset only after finish to configure all lanes
 	 */
-	if ((pcie_width == 1) || (lane == (pcie_width - 1))) {
+	if ((pcie_width == PCIE_LNK_X1) || (lane == (pcie_width - 1))) {
 		u32 i, start_lane, end_lane;
 
-		if (pcie_width != 1) {
+		if (pcie_width != PCIE_LNK_X1) {
 			/* allows writing to all lanes in one write */
 			data = 0x0;
-			mask = COMMON_PHY_SD_CTRL1_COMPHY_0_4_PORT_MASK;
+			if (pcie_width == PCIE_LNK_X2)
+				mask = COMMON_PHY_SD_CTRL1_COMPHY_0_1_PORT_MASK;
+			else if (pcie_width == PCIE_LNK_X4)
+				mask = COMMON_PHY_SD_CTRL1_COMPHY_0_3_PORT_MASK;
 			reg_set(priv->comphy_regs + COMMON_PHY_SD_CTRL1,
 				data,
 				mask);
@@ -1203,9 +1206,16 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 				HPIPE_RST_CLK_CTRL_PIPE_RST_MASK);
 		}
 
-		if (pcie_width != 1) {
+		if (pcie_width != PCIE_LNK_X1) {
 			/* disable writing to all lanes with one write */
-			data = (COMPHY_LANE0 <<
+			if (pcie_width == PCIE_LNK_X2) {
+				data = (COMPHY_LANE0 <<
+				COMMON_PHY_SD_CTRL1_COMPHY_0_PORT_OFFSET) |
+				(COMPHY_LANE1 <<
+				COMMON_PHY_SD_CTRL1_COMPHY_1_PORT_OFFSET);
+				mask = COMMON_PHY_SD_CTRL1_COMPHY_0_1_PORT_MASK;
+			} else if (pcie_width == PCIE_LNK_X4) {
+				data = (COMPHY_LANE0 <<
 				COMMON_PHY_SD_CTRL1_COMPHY_0_PORT_OFFSET) |
 				(COMPHY_LANE1 <<
 				COMMON_PHY_SD_CTRL1_COMPHY_1_PORT_OFFSET) |
@@ -1213,7 +1223,8 @@ static int mvebu_cp110_comphy_pcie_power_on(struct mvebu_comphy_priv *priv,
 				COMMON_PHY_SD_CTRL1_COMPHY_2_PORT_OFFSET) |
 				(COMPHY_LANE3 <<
 				COMMON_PHY_SD_CTRL1_COMPHY_3_PORT_OFFSET);
-			mask = COMMON_PHY_SD_CTRL1_COMPHY_0_4_PORT_MASK;
+				mask = COMMON_PHY_SD_CTRL1_COMPHY_0_3_PORT_MASK;
+			}
 			reg_set(priv->comphy_regs + COMMON_PHY_SD_CTRL1,
 				data, mask);
 		}
diff --git a/drivers/phy/phy-comphy-cp110.h b/drivers/phy/phy-comphy-cp110.h
index 8f746f0..20b6d1e 100644
--- a/drivers/phy/phy-comphy-cp110.h
+++ b/drivers/phy/phy-comphy-cp110.h
@@ -54,8 +54,8 @@ extern const struct mvebu_comphy_soc_info cp110_comphy;
 #define COMMON_PHY_SD_CTRL1_COMPHY_1_PORT_OFFSET	4
 #define COMMON_PHY_SD_CTRL1_COMPHY_2_PORT_OFFSET	8
 #define COMMON_PHY_SD_CTRL1_COMPHY_3_PORT_OFFSET	12
-#define COMMON_PHY_SD_CTRL1_COMPHY_0_4_PORT_OFFSET	0
-#define COMMON_PHY_SD_CTRL1_COMPHY_0_4_PORT_MASK	0xFFFF
+#define COMMON_PHY_SD_CTRL1_COMPHY_0_3_PORT_MASK	0xFFFF
+#define COMMON_PHY_SD_CTRL1_COMPHY_0_1_PORT_MASK	0xFF
 #define COMMON_PHY_SD_CTRL1_PCIE_X4_EN_OFFSET	24
 #define COMMON_PHY_SD_CTRL1_PCIE_X4_EN_MASK	(0x1 << COMMON_PHY_SD_CTRL1_PCIE_X4_EN_OFFSET)
 #define COMMON_PHY_SD_CTRL1_PCIE_X2_EN_OFFSET	25
-- 
2.7.4

