From a2ba34488a0e7963e988c8e6a4288ca71295f8a4 Mon Sep 17 00:00:00 2001
From: zachary <zhangzg@marvell.com>
Date: Tue, 27 Dec 2016 22:36:35 +0800
Subject: [PATCH 1219/2241] fix: spi: a3700: connect SPI core clock to core
 clock driver

- SPI core clock comes from TBG, and is divided by internal prescale
  to generate output clock for SPI devices.
- SPI driver used to get core clock freq value from its own DT node,
  which is the wrong approach since it should be getting from core
  clock driver, so that when TBG module changes SPI core clock, SPI
  DT node does not have to change accordingly.
- This patch improves it to get the input clock from clock
  module and support gating clock.

Change-Id: Ie8872917eaadd1e31967e5ee3f187da0356da77a
Signed-off-by: zachary <zhangzg@marvell.com>
Reviewed-on: http://vgitil04.il.marvell.com:8080/34133
Tested-by: iSoC Platform CI <ykjenk@marvell.com>
Reviewed-by: Hua Jing <jinghua@marvell.com>
---
 .../devicetree/bindings/spi/spi-armada-3700.txt    |  2 ++
 arch/arm64/boot/dts/marvell/armada-37xx.dtsi       |  2 +-
 drivers/spi/spi-armada-3700.c                      | 32 +++++++++++++---------
 3 files changed, 22 insertions(+), 14 deletions(-)

diff --git a/Documentation/devicetree/bindings/spi/spi-armada-3700.txt b/Documentation/devicetree/bindings/spi/spi-armada-3700.txt
index b8e02f2..2f74a6a 100644
--- a/Documentation/devicetree/bindings/spi/spi-armada-3700.txt
+++ b/Documentation/devicetree/bindings/spi/spi-armada-3700.txt
@@ -4,6 +4,7 @@ Required properties:
 - compatible : should be "marvell,armada3700-spi"
 - reg        : offset and length of the spi register
 - cell-index : index of SPI controllers
+- clocks     : gating clock
 Optional properties:
 - interrupts : interrupt id of SPI controller
                If interrupts cell is missing, the driver
@@ -18,6 +19,7 @@ Example:
 	       #size-cells = <0>;
 	       cell-index = <0>;
 	       reg = <0x10600 0xA00>;
+	       clocks = <&ngateclk 12>;
 	       interrupts = <0 0 4>;
 		   fifo-mode;
 	       status = "disabled";
diff --git a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
index 3afb175..af5f188 100644
--- a/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-37xx.dtsi
@@ -110,7 +110,7 @@
 				#address-cells = <1>;
 				#size-cells = <0>;
 				cell-index = <0>;
-				clock-frequency = <200000000>;
+				clocks = <&ngateclk 12>;
 				max-frequency = <50000000>;
 				fifo-mode;
 				interrupts = <GIC_SPI 0 IRQ_TYPE_LEVEL_HIGH>;
diff --git a/drivers/spi/spi-armada-3700.c b/drivers/spi/spi-armada-3700.c
index ddf2e04..8f4323c 100644
--- a/drivers/spi/spi-armada-3700.c
+++ b/drivers/spi/spi-armada-3700.c
@@ -1094,15 +1094,15 @@ static int a3700_spi_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "could not find spi-max-frequency\n");
 		goto error_clk;
 	}
-	of_property_read_u32(of_node, "clock-frequency", &spi->input_clk_freq);
-	if (!spi->input_clk_freq) {
-		dev_err(&pdev->dev, "could not find clock-frequency\n");
-		goto error_clk;
+
+	/* Enable SPI gating clock and get MAX input clock */
+	spi->clk = devm_clk_get(&pdev->dev, NULL);
+	if (!IS_ERR(spi->clk)) {
+		ret = clk_prepare_enable(spi->clk);
+		if (ret)
+			goto error;
+		spi->input_clk_freq = clk_get_rate(spi->clk);
 	}
-	/* TO-DO: there is no gating clock driver so far, and SPI clock
-	 * configuration has been done in boot rom. So we are good for now.
-	 * but when gating clock is ready, need to enable the clock here.
-	 */
 
 	if (of_find_property(of_node, "fifo-mode", NULL)) {
 		dev_err(&pdev->dev, "fifo mode\n");
@@ -1131,8 +1131,10 @@ static int a3700_spi_probe(struct platform_device *pdev)
 	spi->pin_mode = A3700_SPI_SGL_PIN; /* fix-me: add device tree support */
 
 	ret = a3700_spi_init(spi);
-	if (ret)
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to init SPI\n");
 		goto error_clk;
+	}
 
 	if (!(spi->flags & XFER_POLL)) {
 		ret = devm_request_irq(&pdev->dev, spi->irq,
@@ -1144,14 +1146,15 @@ static int a3700_spi_probe(struct platform_device *pdev)
 	}
 
 	ret = spi_register_master(master);
-	if (ret)
+	if (ret) {
+		dev_err(&pdev->dev, "failed to register SPI master\n");
 		goto error_clk;
-
+	}
 out:
 	return ret;
 
 error_clk:
-	/* TO-DO: when gating clock is ready, need to disable the clock. */
+	clk_disable_unprepare(spi->clk);
 
 error:
 	spi_master_put(master);
@@ -1160,9 +1163,12 @@ error:
 
 static int a3700_spi_remove(struct platform_device *pdev)
 {
+	struct a3700_spi *a3700_spi;
 	struct spi_master *master = platform_get_drvdata(pdev);
 
-	/* TO-DO: when gating clock is ready, need to disable the clock. */
+	a3700_spi = spi_master_get_devdata(master);
+	if (!a3700_spi->clk)
+		clk_disable_unprepare(a3700_spi->clk);
 
 	spi_unregister_master(master);
 
-- 
2.7.4

